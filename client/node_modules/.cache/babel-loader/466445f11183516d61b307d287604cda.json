{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/MyDrizzleApp.js\";\nimport React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH; // let drizzle know we want to watch 'sum'\n\n    var dataKey = contract.methods[\"payee\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const payee = ProgPayETH.payee[this.state.dataKey]; // if it exists, then we display its value\n\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"Payee: \", payee && payee.value);\n  }\n\n}\n\nexport default MyDrizzleApp;\n/*import React from \"react\";\nexport default class MyDrizzleApp extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {payeeIndex:null, payerIndex:null};\n  }\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    const payeeIndex = contract.methods[\"payee\"].cacheCall();\n    const payerIndex = contract.methods[\"payer\"].cacheCall();\n\n    this.setState({payeeIndex, payerIndex});\n\n }\n\nrender() {\n  const ProgPayETH = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payee is {payee && payee.value}</p>\n      </div>\n    );\n  }\n}*/","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/MyDrizzleApp.js"],"names":["React","MyDrizzleApp","Component","state","dataKey","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","methods","cacheCall","setState","render","drizzleState","payee","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACzCC,KADyC,GACjC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADiC;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC,CAFkB,CAE4B;;AAC9C,QAAIN,OAAO,GAAGI,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAd,CAHkB,CAGkC;;AACpD,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACD;;AAAAU,EAAAA,MAAM,GAAG;AACR;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAiB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAA/C,CAFQ,CAEiD;;AACzD,UAAMO,KAAK,GAAGN,UAAU,CAACM,KAAX,CAAiB,KAAKb,KAAL,CAAWC,OAA5B,CAAd,CAHQ,CAG2C;;AACnD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWY,KAAK,IAAIA,KAAK,CAACC,KAA1B,CAAP;AACD;;AAbwC;;AAc1C,eAAehB,YAAf;AAMD","sourcesContent":["import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}export default MyDrizzleApp;\n\n\n\n\n\n/*import React from \"react\";\nexport default class MyDrizzleApp extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {payeeIndex:null, payerIndex:null};\n  }\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    const payeeIndex = contract.methods[\"payee\"].cacheCall();\n    const payerIndex = contract.methods[\"payer\"].cacheCall();\n\n    this.setState({payeeIndex, payerIndex});\n\n }\n\nrender() {\n  const ProgPayETH = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payee is {payee && payee.value}</p>\n      </div>\n    );\n  }\n}*/\n"]},"metadata":{},"sourceType":"module"}