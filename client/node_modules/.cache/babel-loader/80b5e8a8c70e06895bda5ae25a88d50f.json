{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js'; //import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    const {\n      drizzle\n    } = this.props;\n    const web3 = this.props.drizzle;\n    const address = this.props.match.params.address;\n\n    if (web3.utils) {\n      let isETHAddress = web3.utils.isAddress(address) ? address : false;\n\n      if (isETHAddress) {\n        var contractConfig = {\n          contractName: \"DynamicProgPayETH\",\n          web3Contract: new web3.eth.Contract(abi, isETHAddress)\n        }; //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n\n        drizzle.addContract(contractConfig);\n      }\n\n      this.setState({\n        cAddress: isETHAddress\n      });\n    }\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    console.log(this.props.drizzle.web3.utils && this.props.drizzle.web3.utils.isAddress(\"abs\"));\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","App","state","loading","drizzleState","cAddress","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","componentDidUpdate","web3","address","match","params","utils","isETHAddress","isAddress","contractConfig","contractName","web3Contract","eth","Contract","addContract","compomentWillUnmount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB,C,CAEA;AACA;;AAIA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC;AAA9C,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB,CADkB,CAOlB;;AACA,SAAKC,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMP,YAAY,GAAGG,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIR,YAAY,CAACS,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEZ,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KATkB,CAAnB;AAYC;;AAEDY,EAAAA,kBAAkB,GAAE;AAClB,UAAM;AAAET,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMS,IAAI,GAAG,KAAKT,KAAL,CAAWD,OAAxB;AACA,UAAMW,OAAO,GAAG,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBF,OAAxC;;AAEA,QAAID,IAAI,CAACI,KAAT,EAAe;AACf,UAAIC,YAAY,GAAGL,IAAI,CAACI,KAAL,CAAWE,SAAX,CAAqBL,OAArB,IAA8BA,OAA9B,GAAsC,KAAzD;;AACA,UAAII,YAAJ,EAAiB;AACjB,YAAIE,cAAc,GAAG;AACnBC,UAAAA,YAAY,EAAE,mBADK;AAEnBC,UAAAA,YAAY,EAAE,IAAIT,IAAI,CAACU,GAAL,CAASC,QAAb,CAAsB5B,GAAtB,EAA0BsB,YAA1B;AAFK,SAArB,CADiB,CAKjB;;AACAf,QAAAA,OAAO,CAACsB,WAAR,CAAoBL,cAApB;AACC;;AAED,WAAKT,QAAL,CAAc;AAACV,QAAAA,QAAQ,EAACiB;AAAV,OAAd;AAGC;AAGF;;AAEHQ,EAAAA,oBAAoB,GAAG;AACrB,SAAKrB,WAAL;AACD;;AAIDsB,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,KAAL,CAAWD,OAAX,CAAmBU,IAAnB,CAAwBI,KAAxB,IAAiC,KAAKb,KAAL,CAAWD,OAAX,CAAmBU,IAAnB,CAAwBI,KAAxB,CAA8BE,SAA9B,CAAwC,KAAxC,CAA7C;AACA,QAAI,KAAKrB,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,QAAI,CAAC,KAAKD,KAAL,CAAWG,QAAhB,EAA0B,OAAO,wBAAP;AAC1B,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AApEyB;;AAqE3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\n//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n\n\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n\n\n    }\n\n    componentDidUpdate(){\n      const { drizzle } = this.props;\n      const web3 = this.props.drizzle;\n      const address = this.props.match.params.address;\n\n      if (web3.utils){\n      let isETHAddress = web3.utils.isAddress(address)?address:false;\n      if (isETHAddress){\n      var contractConfig = {\n        contractName: \"DynamicProgPayETH\",\n        web3Contract: new web3.eth.Contract(abi,isETHAddress)\n      }\n      //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n      drizzle.addContract(contractConfig);\n      }\n\n      this.setState({cAddress:isETHAddress});\n\n\n      }\n\n\n    }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    console.log(this.props.drizzle.web3.utils && this.props.drizzle.web3.utils.isAddress(\"abs\"));\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}