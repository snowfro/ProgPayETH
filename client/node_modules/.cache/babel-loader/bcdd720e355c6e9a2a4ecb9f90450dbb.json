{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React from \"react\";\nimport { DrizzleContext } from \"drizzle-react\";\nimport { Drizzle, generateStore } from \"drizzle\";\nimport ProgPayETH from \"./contracts/ProgPayETH.json\";\nimport MyDrizzleApp from \"./MyDrizzleApp\"; // Check out drizzle's react components at @drizzle/react-components\n\nconst drizzleStore = generateStore(options);\nconst drizzleOptions = {\n  contracts: [ProgPayETH]\n};\nconst drizzle = new Drizzle(drizzleOptions);\n\nconst App = () => {\n  return /*#__PURE__*/React.createElement(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return \"Loading...\";\n    }\n\n    return /*#__PURE__*/React.createElement(MyDrizzleApp, {\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","DrizzleContext","Drizzle","generateStore","ProgPayETH","MyDrizzleApp","drizzleStore","options","drizzleOptions","contracts","drizzle","App","drizzleContext","drizzleState","initialized"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,SAAvC;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAA2C;;AAE3C,MAAMC,YAAY,GAAGH,aAAa,CAACI,OAAD,CAAlC;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,SAAS,EAAE,CAACL,UAAD;AADU,CAAvB;AAIA,MAAMM,OAAO,GAAG,IAAIR,OAAJ,CAAYM,cAAZ,CAAhB;;AAEA,MAAMG,GAAG,GAAG,MAAM;AAChB,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,OAAO,EAAED,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,cAAc,IAAI;AACjB,UAAM;AAACF,MAAAA,OAAD;AAAUG,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,QAAuCF,cAA7C;;AAEA,QAAG,CAACE,WAAJ,EAAiB;AACf,aAAO,YAAP;AACD;;AAED,wBACE,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAEJ,OAAvB;AAAgC,MAAA,YAAY,EAAEG,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGC,GAXL,CADF,CADF;AAiBD,CAlBD;;AAoBA,eAAeF,GAAf","sourcesContent":["import React from \"react\";\nimport { DrizzleContext } from \"drizzle-react\";\nimport { Drizzle, generateStore } from \"drizzle\";\n\nimport ProgPayETH from \"./contracts/ProgPayETH.json\";\nimport MyDrizzleApp from \"./MyDrizzleApp\"; // Check out drizzle's react components at @drizzle/react-components\n\nconst drizzleStore = generateStore(options);\n\nconst drizzleOptions = {\n  contracts: [ProgPayETH],\n};\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nconst App = () => {\n  return (\n    <DrizzleContext.Provider drizzle={drizzle}>\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const {drizzle, drizzleState, initialized} = drizzleContext;\n\n          if(!initialized) {\n            return \"Loading...\"\n          }\n\n          return (\n            <MyDrizzleApp drizzle={drizzle} drizzleState={drizzleState} />\n            )\n          }}\n      </DrizzleContext.Consumer>\n    </DrizzleContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}