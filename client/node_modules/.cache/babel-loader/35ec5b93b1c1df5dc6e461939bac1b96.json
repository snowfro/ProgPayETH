{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const address = this.isAddress(this.props.match.params.address); // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState,\n          cAddress: address\n        });\n      }\n    });\n    var contractConfig = {\n      contractName: \"DynamicProgPayETH\",\n      web3Contract: new web3.eth.Contract(abi, address)\n    };\n    drizzle.addContract(contractConfig);\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n  /**\n  * Checks if the given string is an address\n  *\n  * @method isAddress\n  * @param {String} address the given HEX adress\n  * @return {Boolean}\n  */\n\n\n  isAddress(address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n      // check if it has the basic requirements of an address\n      console.log(\"failed1\");\n      return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n      console.log(\"passed\"); // If it's all small caps or all all caps, return true\n\n      return address;\n    } else {\n      // Otherwise check each case\n      console.log(\"failed2\");\n      return false;\n    }\n  }\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","Web3","web3","givenProvider","App","state","loading","drizzleState","cAddress","componentDidMount","drizzle","props","address","isAddress","match","params","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","contractConfig","contractName","web3Contract","eth","Contract","addContract","compomentWillUnmount","test","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAIA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC;AAA9C,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,OAAO,GAAG,KAAKC,SAAL,CAAe,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBH,OAAvC,CAAhB,CAFkB,CAIlB;;AACA,SAAKI,WAAL,GAAmBN,OAAO,CAACO,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMX,YAAY,GAAGG,OAAO,CAACO,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIZ,YAAY,CAACa,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEhB,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,YAAlB;AAAiCC,UAAAA,QAAQ,EAACI;AAA1C,SAAd;AACD;AACF,KATkB,CAAnB;AAWA,QAAIW,cAAc,GAAG;AACnBC,MAAAA,YAAY,EAAE,mBADK;AAEnBC,MAAAA,YAAY,EAAE,IAAIvB,IAAI,CAACwB,GAAL,CAASC,QAAb,CAAsB3B,GAAtB,EAA0BY,OAA1B;AAFK,KAArB;AAKAF,IAAAA,OAAO,CAACkB,WAAR,CAAoBL,cAApB;AACD;;AAEDM,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,WAAL;AACD;AAED;;;;;;;;;AAOEH,EAAAA,SAAS,CAACD,OAAD,EAAU;AACnB,QAAI,CAAC,uBAAuBkB,IAAvB,CAA4BlB,OAA5B,CAAL,EAA2C;AACvC;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,aAAO,KAAP;AACH,KAJD,MAIO,IAAI,sBAAsBF,IAAtB,CAA2BlB,OAA3B,KAAuC,sBAAsBkB,IAAtB,CAA2BlB,OAA3B,CAA3C,EAAgF;AACnFmB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADmF,CAEnF;;AACA,aAAOpB,OAAP;AACH,KAJM,MAIA;AACH;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,aAAO,KAAP;AACH;AACJ;;AAGCC,EAAAA,MAAM,GAAG;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWD,OAAvB;AACA,QAAI,KAAKL,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,QAAI,CAAC,KAAKD,KAAL,CAAWG,QAAhB,EAA0B,OAAO,wBAAP;AAC1B,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AApEyB;;AAqE3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const address = this.isAddress(this.props.match.params.address);\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState , cAddress:address});\n      }\n    });\n\n    var contractConfig = {\n      contractName: \"DynamicProgPayETH\",\n      web3Contract: new web3.eth.Contract(abi,address)\n    }\n\n    drizzle.addContract(contractConfig);\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  /**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\n    isAddress(address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        console.log(\"failed1\");\n        return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        console.log(\"passed\");\n        // If it's all small caps or all all caps, return true\n        return address;\n    } else {\n        // Otherwise check each case\n        console.log(\"failed2\");\n        return false;\n    }\n};\n\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}