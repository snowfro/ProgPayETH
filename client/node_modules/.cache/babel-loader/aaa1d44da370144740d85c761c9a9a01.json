{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/ShowPaymentTable.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paymentIndexes: []\n    };\n    this.handleRequestPayment = this.handleRequestPayment.bind(this);\n    this.handleApprovePayment = this.handleApprovePayment.bind(this);\n  } //state = {};\n\n  /*\n  {\n    payee && isPayee===true &&\n    <div>\n    <button className=\"btn btn-primary\" onClick={this.handleRequestPayment} disabled = {statusReq===\"pending\"?true:false}>{!statusReq?'Request Next Payment':statusReq===\"success\"?'Success! Request another.':statusReq}</button>\n    </div>\n  }\n  {\n    <div>\n    payer && isPayer===true &&\n    <button className=\"btn btn-primary\" onClick={this.handleApprovePayment} disabled = {statusApp===\"pending\"?true:false}>{!statusApp?'Approve Next Payment':statusApp===\"success\"?'Success! Approve another.':statusApp}</button>\n    </div>\n  }*/\n\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n    const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(2);\n    /*\n    for (let i=0; i<this.props.numberOfPayments; i++){\n      let paymentNumber=(i+1).toString();\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(paymentNumber);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(paymentNumber);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(paymentNumber);\n      paymentIndexes.push({paymentIndex, requestedIndex, approvedIndex});\n    }\n    */\n\n    this.setState({\n      paymentIndexes\n    });\n  }\n\n  handleRequestPayment() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const stackIdReq = contract.methods['requestPayment'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdReq\n    });\n  }\n\n  handleApprovePayment() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const stackIdApp = contract.methods['approvePayment'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdApp\n    });\n  }\n\n  getStatusReq() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdReq]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  getStatusApp() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdApp]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  render() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    console.log(drizzleState);\n    console.log(drizzle.contracts.ProgPayETH.address);\n    let isPayer;\n    let isPayee;\n    const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n    const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n    const nextPayment = ProgPayETH.nextPayment['0x0']; //console.log(nextPayment && \"NPI \"+nextPayment.value);\n    //console.log('2 '+payee.value);\n    //console.log('2r '+payer.value);\n\n    if (payer || payee) {\n      isPayer = this.props.drizzleState.accounts[0] === payer.value;\n      isPayee = this.props.drizzleState.accounts[0] === payee.value; //console.log(isPayer?\"Payer\":isPayee?\"Payee\":\"Neither Payer or Payee\");\n    }\n\n    let paymentDetails = {}; //console.log(this.state.paymentIndexes);\n\n    paymentDetails = this.state.paymentIndexes.map(x => {\n      let rObj = {};\n      rObj['paymentValue'] = ProgPayETH.paymentNumberToValue[x.paymentIndex];\n      rObj['requested'] = ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n      rObj['approved'] = ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n      return rObj; //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n    });\n    let statusReq = this.getStatusReq(); //console.log(\"SRQ \"+statusReq);\n\n    let statusApp = this.getStatusApp();\n    console.log(paymentDetails);\n    let numPayments = this.props.numberOfPayments;\n    let contractVal = this.props.contractValue;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, paymentDetails.map(function (payment, index) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 23\n        }\n      }, \"Payment #\", index + 1, \" in the amount of \", parseFloat(web3.utils.fromWei((contractVal / numPayments).toString(), 'ether')).toFixed(3), \"\\u039E\", payment.requested && (payment.requested.value === false ? \" has not been requested.   \" : payment.approved && payment.approved.value === true ? \" has been requested and paid!\" : \" has been requested and is awaiting approval/payment.   \"), payee && isPayee === true && nextPayment && Number(nextPayment.value) === index + 1 && payment.requested && payment.requested.value === false && /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.handleRequestPayment,\n        disabled: statusReq === \"pending\" ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 23\n        }\n      }, !statusReq ? 'Request' : statusReq === \"success\" ? 'Success!' : statusReq), payer && isPayer === true && nextPayment && Number(nextPayment.value) === index + 1 && payment.requested && payment.requested.value === true && /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.handleApprovePayment,\n        disabled: statusApp === \"pending\" ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 23\n        }\n      }, !statusApp ? 'Approve' : statusApp === \"success\" ? 'Success!' : statusApp)));\n    }, this));\n  }\n\n}\n\nexport default ShowPaymentTable;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/ShowPaymentTable.js"],"names":["React","Web3","web3","givenProvider","ShowPaymentTable","Component","constructor","props","state","paymentIndexes","handleRequestPayment","bind","handleApprovePayment","componentDidMount","drizzle","contract","contracts","ProgPayETH","paymentIndex","methods","cacheCall","setState","drizzleState","stackIdReq","cacheSend","from","accounts","value","stackIdApp","getStatusReq","transactions","transactionStack","txHash","console","log","status","getStatusApp","render","address","isPayer","isPayee","payee","indexes","payeeIndex","payer","payerIndex","nextPayment","paymentDetails","map","x","rObj","paymentNumberToValue","paymentNumberToRequested","requestedIndex","paymentNumberToApproved","approvedIndex","statusReq","statusApp","numPayments","numberOfPayments","contractVal","contractValue","payment","index","parseFloat","utils","fromWei","toString","toFixed","requested","approved","Number"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n\nconstructor(props){\n  super(props);\n  this.state ={paymentIndexes:[]};\n  this.handleRequestPayment = this.handleRequestPayment.bind(this);\n  this.handleApprovePayment = this.handleApprovePayment.bind(this);\n}\n//state = {};\n/*\n{\n  payee && isPayee===true &&\n  <div>\n  <button className=\"btn btn-primary\" onClick={this.handleRequestPayment} disabled = {statusReq===\"pending\"?true:false}>{!statusReq?'Request Next Payment':statusReq===\"success\"?'Success! Request another.':statusReq}</button>\n  </div>\n}\n{\n  <div>\n  payer && isPayer===true &&\n  <button className=\"btn btn-primary\" onClick={this.handleApprovePayment} disabled = {statusApp===\"pending\"?true:false}>{!statusApp?'Approve Next Payment':statusApp===\"success\"?'Success! Approve another.':statusApp}</button>\n  </div>\n}*/\n\n componentDidMount() {\n\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n\n    const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(2);\n\n    /*\n    for (let i=0; i<this.props.numberOfPayments; i++){\n      let paymentNumber=(i+1).toString();\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(paymentNumber);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(paymentNumber);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(paymentNumber);\n      paymentIndexes.push({paymentIndex, requestedIndex, approvedIndex});\n    }\n    */\n\n    this.setState({paymentIndexes});\n }\n\n handleRequestPayment(){\n   const {drizzle, drizzleState} = this.props;\n   const contract = drizzle.contracts.ProgPayETH;\n   const stackIdReq = contract.methods['requestPayment'].cacheSend({from: drizzleState.accounts[0], value:0});\n   this.setState({ stackIdReq });\n }\n\n handleApprovePayment(){\n   const {drizzle, drizzleState} = this.props;\n   const contract = drizzle.contracts.ProgPayETH;\n   const stackIdApp = contract.methods['approvePayment'].cacheSend({from: drizzleState.accounts[0], value:0});\n   this.setState({ stackIdApp });\n }\n\n getStatusReq(){\n   const { transactions, transactionStack } = this.props.drizzleState;\n   // get the transaction hash using our saved `stackId`\n   const txHash = transactionStack[this.state.stackIdReq];\n   // if transaction hash does not exist, don't display anything\n   if (!txHash) return null;\n\n   if (transactions[txHash]){\n   console.log(transactions[txHash].status);\n   return transactions[txHash].status;\n  }\n }\n\n getStatusApp(){\n   const { transactions, transactionStack } = this.props.drizzleState;\n   // get the transaction hash using our saved `stackId`\n   const txHash = transactionStack[this.state.stackIdApp];\n   // if transaction hash does not exist, don't display anything\n   if (!txHash) return null;\n\n   if (transactions[txHash]){\n   console.log(transactions[txHash].status);\n   return transactions[txHash].status;\n  }\n }\n\n\n\nrender() {\n\n  const { drizzle, drizzleState } = this.props;\n  const { ProgPayETH } = this.props.drizzleState.contracts;\n  console.log(drizzleState);\n  console.log(drizzle.contracts.ProgPayETH.address);\n  let isPayer;\n  let isPayee;\n  const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n  const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n  const nextPayment = ProgPayETH.nextPayment['0x0'];\n\n  //console.log(nextPayment && \"NPI \"+nextPayment.value);\n  //console.log('2 '+payee.value);\n  //console.log('2r '+payer.value);\n\n  if (payer || payee){\n    isPayer = this.props.drizzleState.accounts[0]===payer.value;\n    isPayee = this.props.drizzleState.accounts[0]===payee.value;\n    //console.log(isPayer?\"Payer\":isPayee?\"Payee\":\"Neither Payer or Payee\");\n  }\n\n\nlet paymentDetails = {};\n//console.log(this.state.paymentIndexes);\npaymentDetails = this.state.paymentIndexes.map(x=>{\n  let rObj = {};\n  rObj['paymentValue'] = ProgPayETH.paymentNumberToValue[x.paymentIndex];\n  rObj['requested'] = ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n  rObj['approved'] = ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n  return rObj;\n  //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n});\n\nlet statusReq = this.getStatusReq();\n//console.log(\"SRQ \"+statusReq);\nlet statusApp = this.getStatusApp();\n\nconsole.log(paymentDetails);\nlet numPayments = this.props.numberOfPayments;\nlet contractVal = this.props.contractValue;\n\n    return (\n\n      <div>\n\n                {paymentDetails.map(function(payment, index){\n                    return (\n                      <div key={index}>\n                      <p key={index}>Payment #{index+1} in the amount of {parseFloat((web3.utils.fromWei((contractVal/numPayments).toString(), 'ether'))).toFixed(3)}Ξ\n                     {payment.requested && (payment.requested.value===false?\" has not been requested.   \": payment.approved && (payment.approved.value===true)?\" has been requested and paid!\":\" has been requested and is awaiting approval/payment.   \")}\n\n                    {\n                      payee && isPayee===true && nextPayment && Number(nextPayment.value)===index+1 && payment.requested && payment.requested.value===false &&\n                      <button className=\"btn btn-primary\" onClick={this.handleRequestPayment} disabled = {statusReq===\"pending\"?true:false}>{!statusReq?'Request':statusReq===\"success\"?'Success!':statusReq}</button>\n                    }\n                    {\n                      payer && isPayer===true && nextPayment && Number(nextPayment.value)===index+1 && payment.requested && payment.requested.value===true &&\n                      <button className=\"btn btn-primary\" onClick={this.handleApprovePayment} disabled = {statusApp===\"pending\"?true:false}>{!statusApp?'Approve':statusApp===\"success\"?'Success!':statusApp}</button>\n                    }\n                    </p>\n                    </div>\n                  )\n\n\n                }, this)}\n    </div>\n\n    );\n  }\n}\n\nexport default ShowPaymentTable;\n"]},"metadata":{},"sourceType":"module"}