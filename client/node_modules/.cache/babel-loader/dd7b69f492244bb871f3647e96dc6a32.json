{"ast":null,"code":"const Web3 = require(\"web3\");\n\nconst resolveWeb3 = (resolve, options, isBrowser) => {\n  let provider;\n\n  if (options.customProvider) {\n    // use custom provider from options object\n    provider = options.customProvider;\n  } else if (isBrowser && window.ethereum) {\n    // use `ethereum` object injected by MetaMask\n    provider = window.ethereum;\n  } else if (isBrowser && typeof window.web3 !== \"undefined\") {\n    // use injected web3 object by legacy dapp browsers\n    provider = window.web3.currentProvider;\n  } else if (options.fallbackProvider) {\n    // use fallback provider from options object\n    provider = options.fallbackProvider;\n  } else {\n    // connect to development blockchain from `truffle develop`\n    provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n  }\n\n  const web3 = new Web3(provider);\n  resolve(web3);\n};\n\nconst getWeb3 = (options = {}) => new Promise(resolve => {\n  // handle server-side environments\n  if (typeof window === \"undefined\") {\n    return resolveWeb3(resolve, options, false);\n  } // if page is ready, resolve for web3 immediately\n\n\n  if (document.readyState === `complete`) {\n    return resolveWeb3(resolve, options, true);\n  } // otherwise, resolve for web3 when page is done loading\n\n\n  return window.addEventListener(\"load\", () => resolveWeb3(resolve, options, true));\n});\n\nmodule.exports = getWeb3;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/node_modules/drizzle-utils/packages/get-web3/index.js"],"names":["Web3","require","resolveWeb3","resolve","options","isBrowser","provider","customProvider","window","ethereum","web3","currentProvider","fallbackProvider","providers","HttpProvider","getWeb3","Promise","document","readyState","addEventListener","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,OAAV,EAAmBC,SAAnB,KAAiC;AACnD,MAAIC,QAAJ;;AAEA,MAAIF,OAAO,CAACG,cAAZ,EAA4B;AAC1B;AACAD,IAAAA,QAAQ,GAAGF,OAAO,CAACG,cAAnB;AACD,GAHD,MAGO,IAAIF,SAAS,IAAIG,MAAM,CAACC,QAAxB,EAAkC;AACvC;AACAH,IAAAA,QAAQ,GAAGE,MAAM,CAACC,QAAlB;AACD,GAHM,MAGA,IAAIJ,SAAS,IAAI,OAAOG,MAAM,CAACE,IAAd,KAAuB,WAAxC,EAAqD;AAC1D;AACAJ,IAAAA,QAAQ,GAAGE,MAAM,CAACE,IAAP,CAAYC,eAAvB;AACD,GAHM,MAGA,IAAIP,OAAO,CAACQ,gBAAZ,EAA8B;AACnC;AACAN,IAAAA,QAAQ,GAAGF,OAAO,CAACQ,gBAAnB;AACD,GAHM,MAGA;AACL;AACAN,IAAAA,QAAQ,GAAG,IAAIN,IAAI,CAACa,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAX;AACD;;AAED,QAAMJ,IAAI,GAAG,IAAIV,IAAJ,CAASM,QAAT,CAAb;AACAH,EAAAA,OAAO,CAACO,IAAD,CAAP;AACD,CAtBD;;AAwBA,MAAMK,OAAO,GAAG,CAACX,OAAO,GAAG,EAAX,KACd,IAAIY,OAAJ,CAAYb,OAAO,IAAI;AACrB;AACA,MAAI,OAAOK,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAON,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB,KAAnB,CAAlB;AACD,GAJoB,CAMrB;;;AACA,MAAIa,QAAQ,CAACC,UAAT,KAAyB,UAA7B,EAAwC;AACtC,WAAOhB,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB,IAAnB,CAAlB;AACD,GAToB,CAWrB;;;AACA,SAAOI,MAAM,CAACW,gBAAP,CAAwB,MAAxB,EAAgC,MACrCjB,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB,IAAnB,CADN,CAAP;AAGD,CAfD,CADF;;AAkBAgB,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["const Web3 = require(\"web3\");\n\nconst resolveWeb3 = (resolve, options, isBrowser) => {\n  let provider;\n\n  if (options.customProvider) {\n    // use custom provider from options object\n    provider = options.customProvider;\n  } else if (isBrowser && window.ethereum) {\n    // use `ethereum` object injected by MetaMask\n    provider = window.ethereum;\n  } else if (isBrowser && typeof window.web3 !== \"undefined\") {\n    // use injected web3 object by legacy dapp browsers\n    provider = window.web3.currentProvider;\n  } else if (options.fallbackProvider) {\n    // use fallback provider from options object\n    provider = options.fallbackProvider;\n  } else {\n    // connect to development blockchain from `truffle develop`\n    provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n  }\n\n  const web3 = new Web3(provider);\n  resolve(web3);\n};\n\nconst getWeb3 = (options = {}) =>\n  new Promise(resolve => {\n    // handle server-side environments\n    if (typeof window === \"undefined\") {\n      return resolveWeb3(resolve, options, false);\n    }\n\n    // if page is ready, resolve for web3 immediately\n    if (document.readyState === `complete`) {\n      return resolveWeb3(resolve, options, true);\n    }\n\n    // otherwise, resolve for web3 when page is done loading\n    return window.addEventListener(\"load\", () =>\n      resolveWeb3(resolve, options, true),\n    );\n  });\n\nmodule.exports = getWeb3;\n"]},"metadata":{},"sourceType":"script"}