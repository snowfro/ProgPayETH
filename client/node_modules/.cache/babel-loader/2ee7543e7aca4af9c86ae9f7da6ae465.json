{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\nimport PropTypes from 'prop-types';\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const address = this.props.match.params.address;\n    const {\n      web3\n    } = this.context.drizzle;\n    let isETHAddress = web3.utils.isAddress(address) ? address : false; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState,\n          cAddress: isETHAddress\n        });\n      }\n    });\n\n    if (isETHAddress) {\n      var contractConfig = {\n        contractName: \"DynamicProgPayETH\",\n        web3Contract: new web3.eth.Contract(abi, isETHAddress)\n      };\n      drizzle.addContract(contractConfig);\n    }\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nApp.contextTypes = {\n  drizzle: PropTypes.object\n};\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","PropTypes","Web3","web3","givenProvider","App","constructor","props","context","state","loading","drizzleState","cAddress","componentDidMount","drizzle","address","match","params","isETHAddress","utils","isAddress","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","contractConfig","contractName","web3Contract","eth","Contract","addContract","compomentWillUnmount","render","console","log","contextTypes","object"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAIA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAC1BQ,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAgB;AACzB,UAAMD,KAAN;AAEF,SAAKE,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC;AAA9C,KAAb;AACC;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKP,KAAzB;AACA,UAAMQ,OAAO,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBF,OAAxC;AACA,UAAM;AAACZ,MAAAA;AAAD,QAAS,KAAKK,OAAL,CAAaM,OAA5B;AAEA,QAAII,YAAY,GAAGf,IAAI,CAACgB,KAAL,CAAWC,SAAX,CAAqBL,OAArB,IAA8BA,OAA9B,GAAsC,KAAzD,CALkB,CAWlB;;AACA,SAAKM,WAAL,GAAmBP,OAAO,CAACQ,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMZ,YAAY,GAAGG,OAAO,CAACQ,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIb,YAAY,CAACc,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEjB,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,YAAlB;AAAiCC,UAAAA,QAAQ,EAACM;AAA1C,SAAd;AACD;AACF,KATkB,CAAnB;;AAWA,QAAIA,YAAJ,EAAiB;AACjB,UAAIU,cAAc,GAAG;AACnBC,QAAAA,YAAY,EAAE,mBADK;AAEnBC,QAAAA,YAAY,EAAE,IAAI3B,IAAI,CAAC4B,GAAL,CAASC,QAAb,CAAsBhC,GAAtB,EAA0BkB,YAA1B;AAFK,OAArB;AAKAJ,MAAAA,OAAO,CAACmB,WAAR,CAAoBL,cAApB;AACC;AACA;;AAEHM,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,WAAL;AACD;;AAIDc,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9B,KAAL,CAAWO,OAAvB;AACA,QAAI,KAAKL,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,QAAI,CAAC,KAAKD,KAAL,CAAWG,QAAhB,EAA0B,OAAO,wBAAP;AAC1B,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKL,KAAL,CAAWO,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AA3DyB;;AA6D5BN,GAAG,CAACiC,YAAJ,GAAmB;AACjBxB,EAAAA,OAAO,EAAEb,SAAS,CAACsC;AADF,CAAnB;AAGA,eAAelC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\nimport PropTypes from 'prop-types';\n\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  constructor(props, context){\n    super(props)\n\n  this.state = { loading: true, drizzleState: null, cAddress:null };\n  }\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const address = this.props.match.params.address;\n    const {web3} = this.context.drizzle;\n\n    let isETHAddress = web3.utils.isAddress(address)?address:false;\n\n\n\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState , cAddress:isETHAddress});\n      }\n    });\n\n    if (isETHAddress){\n    var contractConfig = {\n      contractName: \"DynamicProgPayETH\",\n      web3Contract: new web3.eth.Contract(abi,isETHAddress)\n    }\n\n    drizzle.addContract(contractConfig);\n    }\n    }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}\nApp.contextTypes = {\n  drizzle: PropTypes.object\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}