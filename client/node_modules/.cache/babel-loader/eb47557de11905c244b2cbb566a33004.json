{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo'; //import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null,\n      contractAdded: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    setTimeout(() => {\n      const {\n        web3\n      } = drizzle;\n      const address = this.props.match.params.address; //console.log(web3);\n\n      let isETHAddress = web3.utils.isAddress(address) ? address : false;\n      console.log(isETHAddress);\n\n      if (isETHAddress) {\n        var contractConfig = {\n          contractName: \"DynamicProgPayETH\",\n          web3Contract: new web3.eth.Contract(this.props.options.contracts[0].abi, isETHAddress)\n        }; //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n\n        drizzle.addContract(contractConfig);\n      }\n\n      this.setState({\n        cAddress: isETHAddress\n      });\n      this.checkIfProgPayETHContract();\n    }, 500); // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  checkIfProgPayETHContract() {\n    const {\n      drizzle\n    } = this.props;\n    const contractNameIndex = drizzle.contracts.DynamicProgPayETH.methods['contractName'].cacheCall();\n    this.setState({\n      contractNameIndex\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    //this.addContract();\n    let dS = this.state.drizzleState;\n    let d = this.props.drizzle;\n    let contractName;\n    console.log(d);\n\n    if (dS && dS.contracts.DynamicProgPayETH) {\n      console.log(\"DrizzleState\");\n      console.log(dS);\n      contractName = dS.contracts.DynamicProgPayETH.contractName[this.state.contractNameIndex];\n    } //let contractName;\n    //if (this.state.drizzleState.contracts.DynamicProgPayETH){\n    //console.log('kie');\n    //  }\n    //console.log(contractName && \"test\"+contractName.value);\n\n\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Loading Drizzle...\"; //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is NOT a valid contract.\";\n    //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is not a compatible contract.\";\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, contractName && contractName.value === \"Progress Payments ETH\" && /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }), contractName && contractName.value !== \"Progress Payments ETH\" && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, \"This is not a supported contract.\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","App","state","loading","drizzleState","cAddress","contractAdded","componentDidMount","drizzle","props","setTimeout","web3","address","match","params","isETHAddress","utils","isAddress","console","log","contractConfig","contractName","web3Contract","eth","Contract","options","contracts","abi","addContract","setState","checkIfProgPayETHContract","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","contractNameIndex","DynamicProgPayETH","methods","cacheCall","compomentWillUnmount","render","dS","d","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\n\n\n//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null, contractAdded:false };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    setTimeout(() => {\n      const { web3 } = drizzle;\n      const address = this.props.match.params.address;\n      //console.log(web3);\n\n      let isETHAddress = web3.utils.isAddress(address)?address:false;\n      console.log(isETHAddress);\n      if (isETHAddress){\n      var contractConfig = {\n        contractName: \"DynamicProgPayETH\",\n        web3Contract: new web3.eth.Contract(this.props.options.contracts[0].abi,isETHAddress)\n      }\n      //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n      drizzle.addContract(contractConfig);\n      }\n\n      this.setState({ cAddress:isETHAddress});\n\n      this.checkIfProgPayETHContract();\n\n    }, 500)\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n\n    }\n\n\n    checkIfProgPayETHContract(){\n\n    const {drizzle} = this.props;\n    const contractNameIndex = drizzle.contracts.DynamicProgPayETH.methods['contractName'].cacheCall();\n    this.setState({contractNameIndex});\n    }\n\n\n\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    //this.addContract();\n    let dS = this.state.drizzleState;\n    let d = this.props.drizzle;\n    let contractName;\n    console.log(d);\n    if (dS && dS.contracts.DynamicProgPayETH){\n    console.log(\"DrizzleState\");\n    console.log(dS);\n    contractName = dS.contracts.DynamicProgPayETH.contractName[this.state.contractNameIndex];\n   }\n    //let contractName;\n    //if (this.state.drizzleState.contracts.DynamicProgPayETH){\n    //console.log('kie');\n  //  }\n    //console.log(contractName && \"test\"+contractName.value);\n\n\n\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Loading Drizzle...\";\n    //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is NOT a valid contract.\";\n    //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is not a compatible contract.\";\n\n\n    return(\n            <div>\n      {contractName && contractName.value===\"Progress Payments ETH\" &&\n\n      <GetContractInfo\n      drizzle={this.props.drizzle}\n      drizzleState={this.state.drizzleState}\n      />\n\n    }\n      {contractName && contractName.value !==\"Progress Payments ETH\" &&\n      <p>This is not a supported contract.</p>\n    }\n      </div>\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}