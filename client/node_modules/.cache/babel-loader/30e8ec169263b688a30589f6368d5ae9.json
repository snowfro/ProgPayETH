{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/MyDrizzleApp.js\";\n\n/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\nimport React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      payeeIndex: null,\n      payerIndex: null\n    };\n  }\n\n  componentDidMount() {\n    //access drizzle props within componentDidMount\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    this.setState({\n      payeeIndex: payeeIndex,\n      payerIndex: payerIndex\n    });\n  }\n\n  render() {\n    const ProgPayETH = this.props.drizzleState.contracts;\n    console.log(ProgPayETH);\n    const payee = ProgPayETH.payee[this.state.payeeIndex]; //console.log(payee);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, \"This Contract's Payee is \", payee && payee.value));\n  }\n\n}\n\nexport default MyDrizzleApp;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/MyDrizzleApp.js"],"names":["React","MyDrizzleApp","Component","state","payeeIndex","payerIndex","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","methods","cacheCall","setState","render","drizzleState","console","log","payee","value"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAE3CC,KAF2C,GAEnC;AAACC,MAAAA,UAAU,EAAC,IAAZ;AAAkBC,MAAAA,UAAU,EAAC;AAA7B,KAFmC;AAAA;;AAK1CC,EAAAA,iBAAiB,GAAG;AAEjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AAEA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC;AAEA,QAAIP,UAAU,GAAGK,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIR,UAAU,GAAGI,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AAEA,SAAKC,QAAL,CAAc;AAACV,MAAAA,UAAU,EAACA,UAAZ;AAAwBC,MAAAA,UAAU,EAACA;AAAnC,KAAd;AAEF;;AAEFU,EAAAA,MAAM,GAAG;AACP,UAAMJ,UAAU,GAAG,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAA3C;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AAEA,UAAMQ,KAAK,GAAGR,UAAU,CAACQ,KAAX,CAAiB,KAAKhB,KAAL,CAAWC,UAA5B,CAAd,CAJO,CAKP;;AACE,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA6Be,KAAK,IAAIA,KAAK,CAACC,KAA5C,CADA,CADF;AAKD;;AA9BwC;;AAiC3C,eAAenB,YAAf","sourcesContent":["/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\n\nimport React from \"react\";\nclass MyDrizzleApp extends React.Component {\n\nstate = {payeeIndex:null, payerIndex:null};\n\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n\n    this.setState({payeeIndex:payeeIndex, payerIndex:payerIndex});\n\n }\n\nrender() {\n  const ProgPayETH = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payee is {payee && payee.value}</p>\n      </div>\n    );\n  }\n}\n\nexport default MyDrizzleApp;\n"]},"metadata":{},"sourceType":"module"}