{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/DissolveFunctions.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass DissolveFunctions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleToggleDissolveStatus = this.handleToggleDissolveStatus.bind(this);\n    this.handleDissolveContract = this.handleDissolveContract.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const payerDissolveIndex = contract.methods['payerWantsOut'].cacheCall();\n    const payeeDissolveIndex = contract.methods['payeeWantsOut'].cacheCall();\n    this.setState({\n      payerDissolveIndex,\n      payeeDissolveIndex\n    });\n  }\n\n  handleToggleDissolveStatus() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['toggleAgreeToDissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdToggleDis\n    });\n  }\n\n  getStatusToggleDis() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdToggleDis]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  handleDissolveContract() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['dissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdDissolve\n    });\n  }\n\n  getStatusDissolve() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdDissolve]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  render() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    const payerDissolve = ProgPayETH.payerWantsOut[this.state.payerDissolveIndex];\n    const payeeDissolve = ProgPayETH.payeeWantsOut[this.state.payeeDissolveIndex];\n    let isPayer;\n    let isPayee;\n    const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n    const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n\n    if (payer || payee) {\n      isPayer = this.props.drizzleState.accounts[0] === payer.value;\n      isPayee = this.props.drizzleState.accounts[0] === payee.value;\n      console.log(isPayer ? \"Payer\" : isPayee ? \"Payee\" : \"Neither Payer or Payee\");\n    }\n\n    let statusToggleDis = this.getStatusToggleDis();\n    let statusDissolve = this.getStatusDissolve();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, \"Contract Dissolution\"), payer && isPayer === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"You indicate that you \", payerDissolve && payerDissolve.value === true ? \"want\" : \"do not want\", \" to dissolve.  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleToggleDissolveStatus,\n      disabled: statusToggleDis === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 115\n      }\n    }, !statusToggleDis ? 'Switch' : statusToggleDis === \"success\" ? 'Success! Switch Again' : statusToggleDis)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"Payee \", payeeDissolve && payeeDissolve.value === true ? \"wants\" : \"does not want\", \" to dissolve.\")), payer && isPayee === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, \"You indicate that you \", payeeDissolve && payeeDissolve.value === true ? \"want\" : \"do not want\", \" to dissolve.  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleToggleDissolveStatus,\n      disabled: statusToggleDis === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 115\n      }\n    }, !statusToggleDis ? 'Switch' : statusToggleDis === \"success\" ? 'Success! Switch Again' : statusToggleDis)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, \"Payer \", payerDissolve && payerDissolve.value === true ? \"wants\" : \"does not want\", \" to dissolve.\")), payerDissolve && payerDissolve.value === true && payeeDissolve && payeeDissolve.value === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, \"Both parties have indicated that they want to dissolve this contract. Clicking \\\"Dissolve\\\" will immediately return any funds remaining in the contract to \", payer && isPayer === true ? \"you\" : \"the payer\", \" and this contract will terminate.\"), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, \" onClick=\", this.handleDissolveContract, \" disabled=\", statusDissolve === \"pending\" ? true : false, \">\", !statusDissolve ? 'Dissolve' : statusDissolve === \"success\" ? 'Success! Contract Dissolved' : statusDissolve)));\n  }\n\n}\n\nexport default DissolveFunctions;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/DissolveFunctions.js"],"names":["React","Web3","web3","givenProvider","DissolveFunctions","Component","constructor","props","state","handleToggleDissolveStatus","bind","handleDissolveContract","componentDidMount","drizzle","contract","contracts","ProgPayETH","payerDissolveIndex","methods","cacheCall","payeeDissolveIndex","setState","drizzleState","stackIdToggleDis","cacheSend","from","accounts","value","getStatusToggleDis","transactions","transactionStack","txHash","console","log","status","stackIdDissolve","getStatusDissolve","render","payerDissolve","payerWantsOut","payeeDissolve","payeeWantsOut","isPayer","isPayee","payee","indexes","payeeIndex","payer","payerIndex","statusToggleDis","statusDissolve"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass DissolveFunctions extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state ={};\n    this.handleToggleDissolveStatus = this.handleToggleDissolveStatus.bind(this);\n    this.handleDissolveContract = this.handleDissolveContract.bind(this);\n\n  }\n\n\n  componentDidMount() {\n\n     const { drizzle } = this.props;\n     const contract = drizzle.contracts.ProgPayETH;\n\n     const payerDissolveIndex = contract.methods['payerWantsOut'].cacheCall();\n     const payeeDissolveIndex = contract.methods['payeeWantsOut'].cacheCall();\n\n    this.setState({payerDissolveIndex, payeeDissolveIndex});\n  }\n\n  handleToggleDissolveStatus(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['toggleAgreeToDissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdToggleDis });\n  }\n\n  getStatusToggleDis(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdToggleDis];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n  handleDissolveContract(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['dissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdDissolve });\n  }\n\n  getStatusDissolve(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdDissolve];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n\n\n\n  render(){\n\n    const { drizzle, drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzleState.contracts;\n\n    const payerDissolve = ProgPayETH.payerWantsOut[this.state.payerDissolveIndex];\n    const payeeDissolve = ProgPayETH.payeeWantsOut[this.state.payeeDissolveIndex];\n\n    let isPayer;\n    let isPayee;\n\n    const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n    const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n\n    if (payer || payee){\n      isPayer = this.props.drizzleState.accounts[0]===payer.value;\n      isPayee = this.props.drizzleState.accounts[0]===payee.value;\n      console.log(isPayer?\"Payer\":isPayee?\"Payee\":\"Neither Payer or Payee\");\n    }\n\n    let statusToggleDis = this.getStatusToggleDis();\n    let statusDissolve = this.getStatusDissolve();\n\n    return (\n\n      <div>\n      <br/>\n      <br/>\n      <hr/>\n      <h4>Contract Dissolution</h4>\n\n      {payer && isPayer===true &&\n        <div>\n        <p>You indicate that you {payerDissolve && payerDissolve.value===true?\"want\":\"do not want\"} to dissolve.  <button onClick={this.handleToggleDissolveStatus} disabled={statusToggleDis===\"pending\"?true:false}>{!statusToggleDis?'Switch':statusToggleDis===\"success\"?'Success! Switch Again':statusToggleDis}</button></p>\n        <p>Payee {payeeDissolve && payeeDissolve.value===true?\"wants\":\"does not want\"} to dissolve.</p>\n        </div>\n      }\n\n      {payer && isPayee===true &&\n        <div>\n        <p>You indicate that you {payeeDissolve && payeeDissolve.value===true?\"want\":\"do not want\"} to dissolve.  <button onClick={this.handleToggleDissolveStatus} disabled={statusToggleDis===\"pending\"?true:false}>{!statusToggleDis?'Switch':statusToggleDis===\"success\"?'Success! Switch Again':statusToggleDis}</button></p>\n        <p>Payer {payerDissolve && payerDissolve.value===true?\"wants\":\"does not want\"} to dissolve.</p>\n        </div>\n      }\n\n      {payerDissolve && payerDissolve.value===true && payeeDissolve && payeeDissolve.value===true &&\n        <div>\n        <p>Both parties have indicated that they want to dissolve this contract. Clicking \"Dissolve\" will immediately return any funds remaining in the contract to {payer && isPayer===true?\"you\":\"the payer\"} and this contract will terminate.</p>\n        <button> onClick={this.handleDissolveContract} disabled={statusDissolve===\"pending\"?true:false}>{!statusDissolve?'Dissolve':statusDissolve===\"success\"?'Success! Contract Dissolved':statusDissolve}</button>\n        </div>\n      }\n\n\n      </div>\n    );\n}\n}\n\n\n\nexport default DissolveFunctions;\n"]},"metadata":{},"sourceType":"module"}