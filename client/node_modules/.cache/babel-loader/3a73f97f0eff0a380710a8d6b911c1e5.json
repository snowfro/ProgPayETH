{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/ShowPaymentTable.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paymentIndexes: []\n    };\n    this.state = {};\n    this.handleRequestPayment = this.handleRequestPayment.bind(this);\n    this.handleApprovePayment = this.handleApprovePayment.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n\n    for (let i = 0; i < this.props.numberOfPayments; i++) {\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(i + 1);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(i + 1);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(i + 1);\n      paymentIndexes.push({\n        paymentIndex,\n        requestedIndex,\n        approvedIndex\n      });\n    }\n\n    this.setState({\n      paymentIndexes\n    });\n  }\n\n  handleRequestPayment() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const stackIdReq = contract.methods['requestPayment'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdReq\n    });\n  }\n\n  handleApprovePayment() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const stackIdApp = contract.methods['approvePayment'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdApp\n    });\n  }\n\n  getStatusReq() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdReq]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  getStatusApp() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdApp]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  render() {\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    let paymentDetails = {}; //console.log(this.state.paymentIndexes);\n\n    paymentDetails = this.state.paymentIndexes.map(x => {\n      let rObj = {};\n      rObj['paymentValue'] = ProgPayETH.paymentNumberToValue[x.paymentIndex];\n      rObj['requested'] = ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n      rObj['approved'] = ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n      return rObj; //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n    });\n    console.log(paymentDetails);\n    let numPayments = this.props.numberOfPayments;\n    let contractVal = this.props.contractValue;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, paymentDetails.map(function (payment, index) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 28\n        }\n      }, \"Payment #\", index + 1, \" in the amount of \", parseFloat(web3.utils.fromWei((contractVal / numPayments).toString(), 'ether')).toFixed(3), \"\\u039E\", payment.requested && (payment.requested.value === false ? \" has not been requested.\" : payment.approved && payment.approved.value === true ? \" has been requested and paid!\" : \" has been requested and is awaiting approval/payment.\"), \" \");\n    }));\n  }\n\n}\n\nexport default ShowPaymentTable;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/ShowPaymentTable.js"],"names":["React","Web3","web3","givenProvider","ShowPaymentTable","Component","constructor","props","state","paymentIndexes","handleRequestPayment","bind","handleApprovePayment","componentDidMount","drizzle","contract","contracts","ProgPayETH","i","numberOfPayments","paymentIndex","methods","cacheCall","requestedIndex","approvedIndex","push","setState","drizzleState","stackIdReq","cacheSend","from","accounts","value","stackIdApp","getStatusReq","transactions","transactionStack","txHash","console","log","status","getStatusApp","render","paymentDetails","map","x","rObj","paymentNumberToValue","paymentNumberToRequested","paymentNumberToApproved","numPayments","contractVal","contractValue","payment","index","parseFloat","utils","fromWei","toString","toFixed","requested","approved"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAEA,MAAMC,gBAAN,SAA+BJ,KAAK,CAACK,SAArC,CAA+C;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AADgB,SAMlBC,KANkB,GAMV;AAACC,MAAAA,cAAc,EAAC;AAAhB,KANU;AAEhB,SAAKD,KAAL,GAAY,EAAZ;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;AAIAE,EAAAA,iBAAiB,GAAG;AAEjB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKP,KAAzB;AACA,UAAMQ,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,UAAnC;AACA,QAAIR,cAAc,GAAG,EAArB;;AAEA,SAAK,IAAIS,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKX,KAAL,CAAWY,gBAA3B,EAA6CD,CAAC,EAA9C,EAAiD;AAC/C,YAAME,YAAY,GAAGL,QAAQ,CAACM,OAAT,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDJ,CAAC,GAAC,CAArD,CAArB;AACA,YAAMK,cAAc,GAAGR,QAAQ,CAACM,OAAT,CAAiB,0BAAjB,EAA6CC,SAA7C,CAAuDJ,CAAC,GAAC,CAAzD,CAAvB;AACA,YAAMM,aAAa,GAAGT,QAAQ,CAACM,OAAT,CAAiB,yBAAjB,EAA4CC,SAA5C,CAAsDJ,CAAC,GAAC,CAAxD,CAAtB;AACAT,MAAAA,cAAc,CAACgB,IAAf,CAAoB;AAACL,QAAAA,YAAD;AAAeG,QAAAA,cAAf;AAA+BC,QAAAA;AAA/B,OAApB;AACD;;AAED,SAAKE,QAAL,CAAc;AAACjB,MAAAA;AAAD,KAAd;AAEF;;AAEDC,EAAAA,oBAAoB,GAAE;AACpB,UAAM;AAACI,MAAAA,OAAD;AAAUa,MAAAA;AAAV,QAA0B,KAAKpB,KAArC;AACA,UAAMQ,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,UAAnC;AACA,UAAMW,UAAU,GAAGb,QAAQ,CAACM,OAAT,CAAiB,gBAAjB,EAAmCQ,SAAnC,CAA6C;AAACC,MAAAA,IAAI,EAAEH,YAAY,CAACI,QAAb,CAAsB,CAAtB,CAAP;AAAiCC,MAAAA,KAAK,EAAC;AAAvC,KAA7C,CAAnB;AACA,SAAKN,QAAL,CAAc;AAAEE,MAAAA;AAAF,KAAd;AACD;;AAEDhB,EAAAA,oBAAoB,GAAE;AACpB,UAAM;AAACE,MAAAA,OAAD;AAAUa,MAAAA;AAAV,QAA0B,KAAKpB,KAArC;AACA,UAAMQ,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,UAAnC;AACA,UAAMgB,UAAU,GAAGlB,QAAQ,CAACM,OAAT,CAAiB,gBAAjB,EAAmCQ,SAAnC,CAA6C;AAACC,MAAAA,IAAI,EAAEH,YAAY,CAACI,QAAb,CAAsB,CAAtB,CAAP;AAAiCC,MAAAA,KAAK,EAAC;AAAvC,KAA7C,CAAnB;AACA,SAAKN,QAAL,CAAc;AAAEO,MAAAA;AAAF,KAAd;AACD;;AAEDC,EAAAA,YAAY,GAAE;AACZ,UAAM;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAqC,KAAK7B,KAAL,CAAWoB,YAAtD,CADY,CAEZ;;AACA,UAAMU,MAAM,GAAGD,gBAAgB,CAAC,KAAK5B,KAAL,CAAWoB,UAAZ,CAA/B,CAHY,CAIZ;;AACA,QAAI,CAACS,MAAL,EAAa,OAAO,IAAP;;AAEb,QAAIF,YAAY,CAACE,MAAD,CAAhB,EAAyB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACE,MAAD,CAAZ,CAAqBG,MAAjC;AACA,aAAOL,YAAY,CAACE,MAAD,CAAZ,CAAqBG,MAA5B;AACA;AACD;;AAEDC,EAAAA,YAAY,GAAE;AACZ,UAAM;AAAEN,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAqC,KAAK7B,KAAL,CAAWoB,YAAtD,CADY,CAEZ;;AACA,UAAMU,MAAM,GAAGD,gBAAgB,CAAC,KAAK5B,KAAL,CAAWyB,UAAZ,CAA/B,CAHY,CAIZ;;AACA,QAAI,CAACI,MAAL,EAAa,OAAO,IAAP;;AAEb,QAAIF,YAAY,CAACE,MAAD,CAAhB,EAAyB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACE,MAAD,CAAZ,CAAqBG,MAAjC;AACA,aAAOL,YAAY,CAACE,MAAD,CAAZ,CAAqBG,MAA5B;AACA;AACD;;AAIFE,EAAAA,MAAM,GAAG;AAET,UAAM;AAAEzB,MAAAA;AAAF,QAAiB,KAAKV,KAAL,CAAWoB,YAAX,CAAwBX,SAA/C;AACA,QAAI2B,cAAc,GAAG,EAArB,CAHS,CAIT;;AACAA,IAAAA,cAAc,GAAG,KAAKnC,KAAL,CAAWC,cAAX,CAA0BmC,GAA1B,CAA8BC,CAAC,IAAE;AAChD,UAAIC,IAAI,GAAG,EAAX;AACAA,MAAAA,IAAI,CAAC,cAAD,CAAJ,GAAuB7B,UAAU,CAAC8B,oBAAX,CAAgCF,CAAC,CAACzB,YAAlC,CAAvB;AACA0B,MAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB7B,UAAU,CAAC+B,wBAAX,CAAoCH,CAAC,CAACtB,cAAtC,CAApB;AACAuB,MAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmB7B,UAAU,CAACgC,uBAAX,CAAmCJ,CAAC,CAACrB,aAArC,CAAnB;AACA,aAAOsB,IAAP,CALgD,CAMhD;AACD,KAPgB,CAAjB;AAQAR,IAAAA,OAAO,CAACC,GAAR,CAAYI,cAAZ;AACA,QAAIO,WAAW,GAAG,KAAK3C,KAAL,CAAWY,gBAA7B;AACA,QAAIgC,WAAW,GAAG,KAAK5C,KAAL,CAAW6C,aAA7B;AAEI,wBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACWT,cAAc,CAACC,GAAf,CAAmB,UAASS,OAAT,EAAkBC,KAAlB,EAAwB;AACxC,0BAAO;AAAG,QAAA,GAAG,EAAEA,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAyBA,KAAK,GAAC,CAA/B,wBAAoDC,UAAU,CAAErD,IAAI,CAACsD,KAAL,CAAWC,OAAX,CAAmB,CAACN,WAAW,GAACD,WAAb,EAA0BQ,QAA1B,EAAnB,EAAyD,OAAzD,CAAF,CAAV,CAAgFC,OAAhF,CAAwF,CAAxF,CAApD,YACLN,OAAO,CAACO,SAAR,KAAsBP,OAAO,CAACO,SAAR,CAAkB5B,KAAlB,KAA0B,KAA1B,GAAgC,0BAAhC,GAA4DqB,OAAO,CAACQ,QAAR,IAAqBR,OAAO,CAACQ,QAAR,CAAiB7B,KAAjB,KAAyB,IAA9C,GAAoD,+BAApD,GAAoF,uDAAtK,CADK,MAAP;AAED,KAHF,CADX,CAFF;AAUD;;AAjG4C;;AAoG/C,eAAe5B,gBAAf","sourcesContent":["\nimport React from \"react\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n\nconstructor(props){\n  super(props);\n  this.state ={};\n  this.handleRequestPayment = this.handleRequestPayment.bind(this);\n  this.handleApprovePayment = this.handleApprovePayment.bind(this);\n}\nstate = {paymentIndexes:[]};\n\n\n componentDidMount() {\n\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n\n    for (let i=0; i<this.props.numberOfPayments; i++){\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(i+1);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(i+1);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(i+1);\n      paymentIndexes.push({paymentIndex, requestedIndex, approvedIndex});\n    }\n\n    this.setState({paymentIndexes});\n\n }\n\n handleRequestPayment(){\n   const {drizzle, drizzleState} = this.props;\n   const contract = drizzle.contracts.ProgPayETH;\n   const stackIdReq = contract.methods['requestPayment'].cacheSend({from: drizzleState.accounts[0], value:0});\n   this.setState({ stackIdReq });\n }\n\n handleApprovePayment(){\n   const {drizzle, drizzleState} = this.props;\n   const contract = drizzle.contracts.ProgPayETH;\n   const stackIdApp = contract.methods['approvePayment'].cacheSend({from: drizzleState.accounts[0], value:0});\n   this.setState({ stackIdApp });\n }\n\n getStatusReq(){\n   const { transactions, transactionStack } = this.props.drizzleState;\n   // get the transaction hash using our saved `stackId`\n   const txHash = transactionStack[this.state.stackIdReq];\n   // if transaction hash does not exist, don't display anything\n   if (!txHash) return null;\n\n   if (transactions[txHash]){\n   console.log(transactions[txHash].status);\n   return transactions[txHash].status;\n  }\n }\n\n getStatusApp(){\n   const { transactions, transactionStack } = this.props.drizzleState;\n   // get the transaction hash using our saved `stackId`\n   const txHash = transactionStack[this.state.stackIdApp];\n   // if transaction hash does not exist, don't display anything\n   if (!txHash) return null;\n\n   if (transactions[txHash]){\n   console.log(transactions[txHash].status);\n   return transactions[txHash].status;\n  }\n }\n\n\n\nrender() {\n\nconst { ProgPayETH } = this.props.drizzleState.contracts;\nlet paymentDetails = {};\n//console.log(this.state.paymentIndexes);\npaymentDetails = this.state.paymentIndexes.map(x=>{\n  let rObj = {};\n  rObj['paymentValue'] = ProgPayETH.paymentNumberToValue[x.paymentIndex];\n  rObj['requested'] = ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n  rObj['approved'] = ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n  return rObj;\n  //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n});\nconsole.log(paymentDetails);\nlet numPayments = this.props.numberOfPayments;\nlet contractVal = this.props.contractValue;\n\n    return (\n\n      <div>\n                {paymentDetails.map(function(payment, index){\n                    return <p key={index}>Payment #{index+1} in the amount of {parseFloat((web3.utils.fromWei((contractVal/numPayments).toString(), 'ether'))).toFixed(3)}Ξ\n                     {payment.requested && (payment.requested.value===false?\" has not been requested.\": payment.approved && (payment.approved.value===true)?\" has been requested and paid!\":\" has been requested and is awaiting approval/payment.\")} {}</p>;\n                  })}\n    </div>\n\n    );\n  }\n}\n\nexport default ShowPaymentTable;\n"]},"metadata":{},"sourceType":"module"}