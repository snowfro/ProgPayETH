{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/DissolveFunctions.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass DissolveFunctions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mediatorAddress: null\n    };\n    this.handleToggleDissolveStatus = this.handleToggleDissolveStatus.bind(this);\n    this.handleDissolveContract = this.handleDissolveContract.bind(this);\n    this.handleSetMediatorAddress = this.handleSetMediatorAddress.bind(this);\n    this.handleForceDissolveContract = this.handleForceDissolveContract.bind(this);\n    this.handleResetDissolveContractTimer = this.handleResetDissolveContractTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    const payerDissolveIndex = contract.methods['payerWantsOut'].cacheCall();\n    const payeeDissolveIndex = contract.methods['payeeWantsOut'].cacheCall();\n    const timeRemainingIndex = contract.methods['timeRemaining'].cacheCall();\n    const forceDissolveStartTimeIndex = contract.methods['forceDissolveStartTime'].cacheCall();\n    const forceDissolveDelayIndex = contract.methods['forceDissolveDelay'].cacheCall();\n    const payerMediatorAddressIndex = contract.methods['payerMediatorAddress'].cacheCall();\n    const payeeMediatorAddressIndex = contract.methods['payeeMediatorAddress'].cacheCall();\n    this.setState({\n      payerDissolveIndex,\n      payeeDissolveIndex,\n      timeRemainingIndex,\n      forceDissolveStartTimeIndex,\n      forceDissolveDelayIndex,\n      payerMediatorAddressIndex,\n      payeeMediatorAddressIndex\n    });\n  }\n\n  handleToggleDissolveStatus() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['toggleAgreeToDissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdToggleDis\n    });\n  }\n\n  getStatusToggleDis() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdToggleDis]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  handleSetMediatorAddress() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdSetMediator = ProgPayETH.methods['setMediatorAddress'].cacheSend(this.state.mediatorAddress, {\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdSetMediator\n    });\n  }\n\n  getStatusSetMediator() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdSetMediator]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  handleChangeMediatorAddressInput(event) {\n    this.setState({\n      mediatorAddress: event.target.value\n    });\n    console.log(this.state.mediatorAddress);\n  }\n\n  handleDissolveContract() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdDissolve = ProgPayETH.methods['dissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdDissolve\n    });\n  }\n\n  getStatusDissolve() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdDissolve]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  handleForceDissolveContract() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdForceDissolve = ProgPayETH.methods['forceDissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdForceDissolve\n    });\n  }\n\n  getStatusForceDissolve() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdForceDissolve]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  handleResetDissolveContractTimer() {\n    const {\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzle.contracts;\n    const stackIdresetForceDissolve = ProgPayETH.methods['resetForceDissolve'].cacheSend({\n      from: drizzleState.accounts[0],\n      value: 0\n    });\n    this.setState({\n      stackIdresetForceDissolve\n    });\n  }\n\n  getStatusDissolveResetTimer() {\n    const {\n      transactions,\n      transactionStack\n    } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n    const txHash = transactionStack[this.state.stackIdresetForceDissolve]; // if transaction hash does not exist, don't display anything\n\n    if (!txHash) return null;\n\n    if (transactions[txHash]) {\n      console.log(transactions[txHash].status);\n      return transactions[txHash].status;\n    }\n  }\n\n  render() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    const payerDissolve = ProgPayETH.payerWantsOut[this.state.payerDissolveIndex];\n    const payeeDissolve = ProgPayETH.payeeWantsOut[this.state.payeeDissolveIndex];\n    const forceDissolveStartTime = ProgPayETH.forceDissolveStartTime[this.state.forceDissolveStartTimeIndex];\n    const forceDissolveDelay = ProgPayETH.forceDissolveDelay[this.state.forceDissolveDelayIndex];\n    const payerMediatorAddress = ProgPayETH.payerMediatorAddress[this.state.payerMediatorAddressIndex];\n    const payeeMediatorAddress = ProgPayETH.payeeMediatorAddress[this.state.payeeMediatorAddressIndex];\n    let payerMediatorSentence = payerMediatorAddress && \" You've set your mediator address to \" + payerMediatorAddress.value + \".\";\n    let payeeMediatorSentence = payeeMediatorAddress && \" You've set your mediator address to \" + payeeMediatorAddress.value + \".\";\n    console.log(payerMediatorAddress && \"PrMA \" + payerMediatorAddress.value);\n    console.log(payeeMediatorAddress && \"PeMA \" + payeeMediatorAddress.value);\n    let timerExpiresDate;\n\n    if (forceDissolveStartTime && forceDissolveDelay) {\n      let timerExpires = forceDissolveStartTime.value + forceDissolveDelay.value;\n      timerExpiresDate = new Date(timerExpires * 1).toString();\n      console.log(\"exp \" + timerExpiresDate);\n    }\n\n    let isPayer;\n    let isPayee;\n    const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n    const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n    const timeRemaining = ProgPayETH.timeRemaining[this.state.timeRemainingIndex];\n\n    if (payer || payee) {\n      isPayer = this.props.drizzleState.accounts[0] === payer.value;\n      isPayee = this.props.drizzleState.accounts[0] === payee.value;\n      console.log(isPayer ? \"Payer\" : isPayee ? \"Payee\" : \"Neither Payer or Payee\");\n    }\n\n    console.log(timeRemaining && \"Time remaining: \" + timeRemaining.value);\n    let statusToggleDis = this.getStatusToggleDis();\n    let statusDissolve = this.getStatusDissolve();\n    let statusSetMediator = this.getStatusSetMediator();\n    let statusForceDissolve = this.getStatusForceDissolve();\n    let statusDissolveResetTimer = this.getStatusDissolveResetTimer();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, \"Contract Dissolution\"), payer && isPayer === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"You indicate that you \", payerDissolve && payerDissolve.value === true ? \"want\" : \"do not want\", \" to dissolve.  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleToggleDissolveStatus,\n      disabled: statusToggleDis === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 115\n      }\n    }, !statusToggleDis ? 'Switch' : statusToggleDis === \"success\" ? 'Success! Switch Again' : statusToggleDis)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, \"Payee \", payeeDissolve && payeeDissolve.value === true ? \"wants\" : \"does not want\", \" to dissolve.\")), payer && isPayee === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, \"You indicate that you \", payeeDissolve && payeeDissolve.value === true ? \"want\" : \"do not want\", \" to dissolve.  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleToggleDissolveStatus,\n      disabled: statusToggleDis === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 115\n      }\n    }, !statusToggleDis ? 'Switch' : statusToggleDis === \"success\" ? 'Success! Switch Again' : statusToggleDis)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, \"Payer \", payerDissolve && payerDissolve.value === true ? \"wants\" : \"does not want\", \" to dissolve.\")), timeRemaining && timeRemaining.value > 0 && timeRemaining.value < 100000000000000 && payerDissolve && payerDissolve.value === false && payeeDissolve && payeeDissolve.value === false && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleResetDissolveContractTimer,\n      disabled: statusDissolveResetTimer === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, !statusDissolveResetTimer ? 'Reset Timer' : statusDissolveResetTimer === \"success\" ? 'Success! Timer Reset' : statusDissolveResetTimer), payerDissolve && payerDissolve.value === true && payeeDissolve && payeeDissolve.value === true && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }, \"Both parties have indicated that they want to dissolve this contract. Clicking \\\"Dissolve\\\" will immediately return any funds remaining in the contract to \", payer && isPayer === true ? \"you\" : \"the payer\", \" and this contract will terminate.\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDissolveContract,\n      disabled: statusDissolve === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, !statusDissolve ? 'Force Dissolve' : statusDissolve === \"success\" ? 'Success! Contract Dissolved' : statusDissolve)), (payerDissolve && payerDissolve.value === true || payeeDissolve && payeeDissolve.value === true) && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }, \"When only one party wants to dissolve the contract there are three possible courses of action:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, \"Convince other party to agree to dissolve the contract.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, \"Trigger a cool down timer of \", forceDissolveDelay && Number(forceDissolveDelay.value / 60 / 60 / 24).toFixed(3), \" days after which either party can force the dissolution of the contract where the next payment is split between both parties and the remaining funds are transferred to the payer.\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleForceDissolveContract,\n      disabled: statusForceDissolve === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, !statusForceDissolve ? 'Force Dissolve & Start Timer' : statusForceDissolve === \"success\" ? 'Success! Timer Started' : statusForceDissolve)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, \"***The timer can be disabled, even after expiration, if both payer and payee indicate that they want to dissolve the contract.\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, \"Agree to and set a mediator who will receive the funds and manage the distribution of funds outside of this contract.\", payer && isPayer === true && (payerMediatorAddress && payerMediatorAddress.value === \"0x0000000000000000000000000000000000000000\" ? \" You have not set a mediator address.\" : payerMediatorSentence), payer && isPayee === true && (payeeMediatorAddress && payeeMediatorAddress.value === \"0x0000000000000000000000000000000000000000\" ? \" You have not set a mediator address.\" : payeeMediatorSentence), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"0x.....\",\n      className: \"form-control\",\n      \"aria-label\": \"Contact Method\",\n      \"aria-describedby\": \"contact-method\",\n      onChange: this.handleChangeMediatorAddressInput.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSetMediatorAddress,\n      disabled: statusSetMediator === \"pending\" ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, !statusSetMediator ? 'Set New Mediator Address' : statusSetMediator === \"success\" ? 'Success!' : statusSetMediator))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }, \"Any of the three above options will immediately terminate the contract and transfer all remaining funds to the designated recipient.\")), timeRemaining && timeRemaining.value > 0 && timeRemaining.value < 100000000000000 && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, \"Force Dissolve has been triggered! This contract can be dissolved even when only one party wants to dissolve it on \", timerExpiresDate, \". Once the timer has expired either party can click the \\\"Force Dissolve\\\" button below to terminate the contract. This will split the last payment between the two parties and transfer remaining funds back to payer.\"));\n  }\n\n}\n\nexport default DissolveFunctions;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/DissolveFunctions.js"],"names":["React","Web3","web3","givenProvider","DissolveFunctions","Component","constructor","props","state","mediatorAddress","handleToggleDissolveStatus","bind","handleDissolveContract","handleSetMediatorAddress","handleForceDissolveContract","handleResetDissolveContractTimer","componentDidMount","drizzle","contract","contracts","ProgPayETH","payerDissolveIndex","methods","cacheCall","payeeDissolveIndex","timeRemainingIndex","forceDissolveStartTimeIndex","forceDissolveDelayIndex","payerMediatorAddressIndex","payeeMediatorAddressIndex","setState","drizzleState","stackIdToggleDis","cacheSend","from","accounts","value","getStatusToggleDis","transactions","transactionStack","txHash","console","log","status","stackIdSetMediator","getStatusSetMediator","handleChangeMediatorAddressInput","event","target","stackIdDissolve","getStatusDissolve","stackIdForceDissolve","getStatusForceDissolve","stackIdresetForceDissolve","getStatusDissolveResetTimer","render","payerDissolve","payerWantsOut","payeeDissolve","payeeWantsOut","forceDissolveStartTime","forceDissolveDelay","payerMediatorAddress","payeeMediatorAddress","payerMediatorSentence","payeeMediatorSentence","timerExpiresDate","timerExpires","Date","toString","isPayer","isPayee","payee","indexes","payeeIndex","payer","payerIndex","timeRemaining","statusToggleDis","statusDissolve","statusSetMediator","statusForceDissolve","statusDissolveResetTimer","Number","toFixed"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass DissolveFunctions extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state ={mediatorAddress:null};\n    this.handleToggleDissolveStatus = this.handleToggleDissolveStatus.bind(this);\n    this.handleDissolveContract = this.handleDissolveContract.bind(this);\n    this.handleSetMediatorAddress = this.handleSetMediatorAddress.bind(this);\n    this.handleForceDissolveContract = this.handleForceDissolveContract.bind(this);\n    this.handleResetDissolveContractTimer = this.handleResetDissolveContractTimer.bind(this);\n\n  }\n\n\n  componentDidMount() {\n\n     const { drizzle } = this.props;\n     const contract = drizzle.contracts.ProgPayETH;\n\n     const payerDissolveIndex = contract.methods['payerWantsOut'].cacheCall();\n     const payeeDissolveIndex = contract.methods['payeeWantsOut'].cacheCall();\n\n     const timeRemainingIndex = contract.methods['timeRemaining'].cacheCall();\n\n     const forceDissolveStartTimeIndex = contract.methods['forceDissolveStartTime'].cacheCall();\n     const forceDissolveDelayIndex = contract.methods['forceDissolveDelay'].cacheCall();\n\n     const payerMediatorAddressIndex = contract.methods['payerMediatorAddress'].cacheCall();\n     const payeeMediatorAddressIndex = contract.methods['payeeMediatorAddress'].cacheCall();\n\n\n\n    this.setState({payerDissolveIndex, payeeDissolveIndex, timeRemainingIndex, forceDissolveStartTimeIndex, forceDissolveDelayIndex, payerMediatorAddressIndex, payeeMediatorAddressIndex});\n  }\n\n  handleToggleDissolveStatus(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdToggleDis = ProgPayETH.methods['toggleAgreeToDissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdToggleDis });\n  }\n\n  getStatusToggleDis(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdToggleDis];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n  handleSetMediatorAddress(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdSetMediator = ProgPayETH.methods['setMediatorAddress'].cacheSend(this.state.mediatorAddress,{from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdSetMediator });\n  }\n\n  getStatusSetMediator(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdSetMediator];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n  handleChangeMediatorAddressInput(event){\n    this.setState({mediatorAddress:event.target.value})\n    console.log(this.state.mediatorAddress);\n  }\n\n  handleDissolveContract(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdDissolve = ProgPayETH.methods['dissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdDissolve });\n  }\n\n  getStatusDissolve(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdDissolve];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n  handleForceDissolveContract(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdForceDissolve = ProgPayETH.methods['forceDissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdForceDissolve });\n  }\n\n  getStatusForceDissolve(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdForceDissolve];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n  handleResetDissolveContractTimer(){\n    const { drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzle.contracts;\n    const stackIdresetForceDissolve = ProgPayETH.methods['resetForceDissolve'].cacheSend({from: drizzleState.accounts[0], value:0});\n    this.setState({ stackIdresetForceDissolve });\n  }\n\n  getStatusDissolveResetTimer(){\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackIdresetForceDissolve];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    if (transactions[txHash]){\n    console.log(transactions[txHash].status);\n    return transactions[txHash].status;\n   }\n  }\n\n\n\n  render(){\n\n    const { drizzle, drizzleState } = this.props;\n    const { ProgPayETH } = this.props.drizzleState.contracts;\n\n    const payerDissolve = ProgPayETH.payerWantsOut[this.state.payerDissolveIndex];\n    const payeeDissolve = ProgPayETH.payeeWantsOut[this.state.payeeDissolveIndex];\n    const forceDissolveStartTime = ProgPayETH.forceDissolveStartTime[this.state.forceDissolveStartTimeIndex];\n    const forceDissolveDelay = ProgPayETH.forceDissolveDelay[this.state.forceDissolveDelayIndex];\n\n    const payerMediatorAddress = ProgPayETH.payerMediatorAddress[this.state.payerMediatorAddressIndex];\n    const payeeMediatorAddress = ProgPayETH.payeeMediatorAddress[this.state.payeeMediatorAddressIndex];\n\n    let payerMediatorSentence = (payerMediatorAddress && \" You've set your mediator address to \"+payerMediatorAddress.value+\".\");\n    let payeeMediatorSentence = (payeeMediatorAddress && \" You've set your mediator address to \"+payeeMediatorAddress.value+\".\");\n    console.log(payerMediatorAddress && \"PrMA \"+payerMediatorAddress.value);\n    console.log(payeeMediatorAddress && \"PeMA \"+payeeMediatorAddress.value);\n\n    let timerExpiresDate;\n    if (forceDissolveStartTime && forceDissolveDelay){\n      let timerExpires = forceDissolveStartTime.value + forceDissolveDelay.value;\n      timerExpiresDate = new Date(timerExpires*1).toString();\n      console.log(\"exp \"+timerExpiresDate);\n    }\n\n\n    let isPayer;\n    let isPayee;\n\n    const payee = ProgPayETH.payee[this.props.indexes.payeeIndex];\n    const payer = ProgPayETH.payer[this.props.indexes.payerIndex];\n\n    const timeRemaining = ProgPayETH.timeRemaining[this.state.timeRemainingIndex];\n\n    if (payer || payee){\n      isPayer = this.props.drizzleState.accounts[0]===payer.value;\n      isPayee = this.props.drizzleState.accounts[0]===payee.value;\n      console.log(isPayer?\"Payer\":isPayee?\"Payee\":\"Neither Payer or Payee\");\n    }\n\n    console.log(timeRemaining && \"Time remaining: \" + timeRemaining.value);\n\n    let statusToggleDis = this.getStatusToggleDis();\n    let statusDissolve = this.getStatusDissolve();\n    let statusSetMediator = this.getStatusSetMediator();\n    let statusForceDissolve = this.getStatusForceDissolve();\n    let statusDissolveResetTimer = this.getStatusDissolveResetTimer();\n\n    return (\n\n      <div>\n      <br/>\n      <br/>\n      <hr/>\n      <h4>Contract Dissolution</h4>\n\n      {payer && isPayer===true &&\n        <div>\n        <p>You indicate that you {payerDissolve && payerDissolve.value===true?\"want\":\"do not want\"} to dissolve.  <button onClick={this.handleToggleDissolveStatus} disabled={statusToggleDis===\"pending\"?true:false}>{!statusToggleDis?'Switch':statusToggleDis===\"success\"?'Success! Switch Again':statusToggleDis}</button></p>\n        <p>Payee {payeeDissolve && payeeDissolve.value===true?\"wants\":\"does not want\"} to dissolve.</p>\n        </div>\n      }\n\n      {payer && isPayee===true &&\n        <div>\n        <p>You indicate that you {payeeDissolve && payeeDissolve.value===true?\"want\":\"do not want\"} to dissolve.  <button onClick={this.handleToggleDissolveStatus} disabled={statusToggleDis===\"pending\"?true:false}>{!statusToggleDis?'Switch':statusToggleDis===\"success\"?'Success! Switch Again':statusToggleDis}</button></p>\n        <p>Payer {payerDissolve && payerDissolve.value===true?\"wants\":\"does not want\"} to dissolve.</p>\n        </div>\n      }\n      { timeRemaining && timeRemaining.value>0 && timeRemaining.value<100000000000000 && payerDissolve && payerDissolve.value===false && payeeDissolve && payeeDissolve.value===false &&\n        <button onClick={this.handleResetDissolveContractTimer} disabled={statusDissolveResetTimer===\"pending\"?true:false}>{!statusDissolveResetTimer?'Reset Timer':statusDissolveResetTimer===\"success\"?'Success! Timer Reset':statusDissolveResetTimer}</button>\n      }\n\n      {payerDissolve && payerDissolve.value===true && payeeDissolve && payeeDissolve.value===true &&\n        <div>\n        <p>Both parties have indicated that they want to dissolve this contract. Clicking \"Dissolve\" will immediately return any funds remaining in the contract to {payer && isPayer===true?\"you\":\"the payer\"} and this contract will terminate.</p>\n        <button onClick={this.handleDissolveContract} disabled={statusDissolve===\"pending\"?true:false}>{!statusDissolve?'Force Dissolve':statusDissolve===\"success\"?'Success! Contract Dissolved':statusDissolve}</button>\n        </div>\n      }\n\n      {((payerDissolve && payerDissolve.value===true) || (payeeDissolve && payeeDissolve.value===true)) &&\n        <div>\n        <p>When only one party wants to dissolve the contract there are three possible courses of action:</p>\n        <ul>\n          <li>Convince other party to agree to dissolve the contract.</li>\n          <li>\n          <p>Trigger a cool down timer of {forceDissolveDelay && Number(forceDissolveDelay.value/60/60/24).toFixed(3)} days after which either party can force the dissolution of the contract where the next payment is split between both parties and the remaining funds are transferred to the payer.\n          <button onClick={this.handleForceDissolveContract} disabled={statusForceDissolve===\"pending\"?true:false}>{!statusForceDissolve?'Force Dissolve & Start Timer':statusForceDissolve===\"success\"?'Success! Timer Started':statusForceDissolve}</button></p>\n          <p>***The timer can be disabled, even after expiration, if both payer and payee indicate that they want to dissolve the contract.</p>\n\n          </li>\n          <li>Agree to and set a mediator who will receive the funds and manage the distribution of funds outside of this contract.\n          {payer && isPayer===true &&\n            (payerMediatorAddress && payerMediatorAddress.value===\"0x0000000000000000000000000000000000000000\"?\" You have not set a mediator address.\":payerMediatorSentence)}\n\n          {payer && isPayee===true &&\n              (payeeMediatorAddress && payeeMediatorAddress.value===\"0x0000000000000000000000000000000000000000\"?\" You have not set a mediator address.\":payeeMediatorSentence)}\n              <br/>\n              <input type=\"text\" placeholder=\"0x.....\" className=\"form-control\" aria-label=\"Contact Method\" aria-describedby=\"contact-method\" onChange={this.handleChangeMediatorAddressInput.bind(this)}/>\n              <button onClick={this.handleSetMediatorAddress} disabled={statusSetMediator===\"pending\"?true:false}>{!statusSetMediator?'Set New Mediator Address':statusSetMediator===\"success\"?'Success!':statusSetMediator}</button>\n            </li>\n        </ul>\n        <p>Any of the three above options will immediately terminate the contract and transfer all remaining funds to the designated recipient.</p>\n        </div>\n      }\n      {timeRemaining && timeRemaining.value>0 && timeRemaining.value<100000000000000 &&\n        <p>Force Dissolve has been triggered! This contract can be dissolved even when only one party wants to dissolve it on {timerExpiresDate}.\n        Once the timer has expired either party can click the \"Force Dissolve\" button below to terminate the contract. This will split the last payment between the two parties and transfer remaining funds back to payer.</p>\n      }\n      </div>\n    );\n}\n}\n\n\n\nexport default DissolveFunctions;\n"]},"metadata":{},"sourceType":"module"}