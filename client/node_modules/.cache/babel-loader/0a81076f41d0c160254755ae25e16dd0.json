{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/GetContractInfo.js\";\nimport React from \"react\";\nimport ShowPaymentTable from \"./ShowPaymentTable\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass GetContractInfo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    //access drizzle props within componentDidMount\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n    var fundedIndex = contract.methods[\"contractFunded\"].cacheCall();\n    var nextPaymentIndex = contract.methods[\"nextPayment\"].cacheCall();\n    var remainingBalanceIndex = contract.methods[\"remainingBalance\"].cacheCall();\n    this.setState({\n      payeeIndex,\n      payerIndex,\n      contractValueIndex,\n      numberOfPaymentsIndex,\n      fundedIndex,\n      nextPaymentIndex,\n      remainingBalanceIndex\n    });\n  }\n\n  render() {\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    console.log(ProgPayETH);\n    const payee = ProgPayETH.payee[this.state.payeeIndex];\n    const payer = ProgPayETH.payer[this.state.payerIndex];\n    const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n    const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex];\n    const contractFunded = ProgPayETH.contractFunded[this.state.fundedIndex];\n    const nextPayment = ProgPayETH.nextPayment[this.state.nextPaymentIndex];\n    const remainingBalance = ProgPayETH.remainingBalance[this.state.remainingBalanceIndex];\n\n    if (contractFunded) {\n      console.log(contractFunded.value);\n    } //console.log(payee);\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, \"This Contract's Payer is \", payer && payer.value, \" and the Payee is \", payee && payee.value, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, \"This contract is \", contractFunded && (contractFunded.value === true ? \"\" : \"NOT YET\"), \" funded.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, \"The total value of this contract is \", contractValue && web3.utils.fromWei(contractValue.value.toString(), 'ether'), \"\\u039E to be paid over \", numberOfPayments && numberOfPayments.value, \" payments.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"Remaining balance to be paid on this contract: \", remainingBalance && web3.utils.fromWei(remainingBalance.value.toString(), 'ether'), \"\\u039E.\"), numberOfPayments && /*#__PURE__*/React.createElement(ShowPaymentTable, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.props.drizzleState,\n      numberOfPayments: numberOfPayments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default GetContractInfo;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/GetContractInfo.js"],"names":["React","ShowPaymentTable","Web3","web3","givenProvider","GetContractInfo","Component","state","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","payeeIndex","methods","cacheCall","payerIndex","contractValueIndex","numberOfPaymentsIndex","fundedIndex","nextPaymentIndex","remainingBalanceIndex","setState","render","drizzleState","console","log","payee","payer","contractValue","contractValueInWei","numberOfPayments","contractFunded","nextPayment","remainingBalance","value","utils","fromWei","toString"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAEA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAAA;AAAA;AAAA,SAE9CC,KAF8C,GAEtC,EAFsC;AAAA;;AAK7CC,EAAAA,iBAAiB,GAAG;AAEjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AAEA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC;AAEA,QAAIC,UAAU,GAAGH,QAAQ,CAACI,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIC,UAAU,GAAGN,QAAQ,CAACI,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIE,kBAAkB,GAAGP,QAAQ,CAACI,OAAT,CAAiB,oBAAjB,EAAuCC,SAAvC,EAAzB;AACA,QAAIG,qBAAqB,GAAGR,QAAQ,CAACI,OAAT,CAAiB,kBAAjB,EAAqCC,SAArC,EAA5B;AACA,QAAII,WAAW,GAAGT,QAAQ,CAACI,OAAT,CAAiB,gBAAjB,EAAmCC,SAAnC,EAAlB;AACA,QAAIK,gBAAgB,GAAGV,QAAQ,CAACI,OAAT,CAAiB,aAAjB,EAAgCC,SAAhC,EAAvB;AACA,QAAIM,qBAAqB,GAAGX,QAAQ,CAACI,OAAT,CAAiB,kBAAjB,EAAqCC,SAArC,EAA5B;AAGA,SAAKO,QAAL,CAAc;AAACT,MAAAA,UAAD;AAAaG,MAAAA,UAAb;AAAyBC,MAAAA,kBAAzB;AAA6CC,MAAAA,qBAA7C;AAAoEC,MAAAA,WAApE;AAAiFC,MAAAA,gBAAjF;AAAmGC,MAAAA;AAAnG,KAAd;AAEF;;AAGFE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA;AAAF,QAAiB,KAAKH,KAAL,CAAWe,YAAX,CAAwBb,SAA/C;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AAEA,UAAMe,KAAK,GAAGf,UAAU,CAACe,KAAX,CAAiB,KAAKrB,KAAL,CAAWO,UAA5B,CAAd;AACA,UAAMe,KAAK,GAAGhB,UAAU,CAACgB,KAAX,CAAiB,KAAKtB,KAAL,CAAWU,UAA5B,CAAd;AACA,UAAMa,aAAa,GAAGjB,UAAU,CAACkB,kBAAX,CAA8B,KAAKxB,KAAL,CAAWW,kBAAzC,CAAtB;AACA,UAAMc,gBAAgB,GAAGnB,UAAU,CAACmB,gBAAX,CAA4B,KAAKzB,KAAL,CAAWY,qBAAvC,CAAzB;AACA,UAAMc,cAAc,GAAGpB,UAAU,CAACoB,cAAX,CAA0B,KAAK1B,KAAL,CAAWa,WAArC,CAAvB;AACA,UAAMc,WAAW,GAAGrB,UAAU,CAACqB,WAAX,CAAuB,KAAK3B,KAAL,CAAWc,gBAAlC,CAApB;AACA,UAAMc,gBAAgB,GAAGtB,UAAU,CAACsB,gBAAX,CAA4B,KAAK5B,KAAL,CAAWe,qBAAvC,CAAzB;;AAEA,QAAIW,cAAJ,EAAmB;AACjBP,MAAAA,OAAO,CAACC,GAAR,CAAYM,cAAc,CAACG,KAA3B;AACD,KAdM,CAeP;;;AACE,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA6BP,KAAK,IAAIA,KAAK,CAACO,KAA5C,wBAAqER,KAAK,IAAIA,KAAK,CAACQ,KAApF,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqBH,cAAc,KAAKA,cAAc,CAACG,KAAf,KAAuB,IAAvB,GAA4B,EAA5B,GAA+B,SAApC,CAAnC,aAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAwCN,aAAa,IAAK3B,IAAI,CAACkC,KAAL,CAAWC,OAAX,CAAoBR,aAAa,CAACM,KAAf,CAAsBG,QAAtB,EAAnB,EAAqD,OAArD,CAA1D,6BAA4IP,gBAAgB,IAAIA,gBAAgB,CAACI,KAAjL,eAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAmDD,gBAAgB,IAAKhC,IAAI,CAACkC,KAAL,CAAWC,OAAX,CAAoBH,gBAAgB,CAACC,KAAlB,CAAyBG,QAAzB,EAAnB,EAAwD,OAAxD,CAAxE,YAJA,EAKCP,gBAAgB,iBACjB,oBAAC,gBAAD;AACA,MAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKC,KAAL,CAAWe,YAFzB;AAGA,MAAA,gBAAgB,EAAEO,gBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,CADF;AAeD;;AAzD2C;;AA4D9C,eAAe3B,eAAf","sourcesContent":["\nimport React from \"react\";\nimport ShowPaymentTable from \"./ShowPaymentTable\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass GetContractInfo extends React.Component {\n\nstate = {};\n\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n    var fundedIndex = contract.methods[\"contractFunded\"].cacheCall();\n    var nextPaymentIndex = contract.methods[\"nextPayment\"].cacheCall();\n    var remainingBalanceIndex = contract.methods[\"remainingBalance\"].cacheCall();\n\n\n    this.setState({payeeIndex, payerIndex, contractValueIndex, numberOfPaymentsIndex, fundedIndex, nextPaymentIndex, remainingBalanceIndex});\n\n }\n\n\nrender() {\n  const { ProgPayETH } = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  const payer = ProgPayETH.payer[this.state.payerIndex];\n  const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n  const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex];\n  const contractFunded = ProgPayETH.contractFunded[this.state.fundedIndex];\n  const nextPayment = ProgPayETH.nextPayment[this.state.nextPaymentIndex];\n  const remainingBalance = ProgPayETH.remainingBalance[this.state.remainingBalanceIndex];\n\n  if (contractFunded){\n    console.log(contractFunded.value);\n  }\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payer is {payer && payer.value} and the Payee is {payee && payee.value}.</p>\n      <p>This contract is {contractFunded && (contractFunded.value===true?\"\":\"NOT YET\")} funded.</p>\n      <p>The total value of this contract is {contractValue && (web3.utils.fromWei((contractValue.value).toString(), 'ether'))}Ξ to be paid over {numberOfPayments && numberOfPayments.value} payments.</p>\n      <p>Remaining balance to be paid on this contract: {remainingBalance && (web3.utils.fromWei((remainingBalance.value).toString(), 'ether'))}Ξ.</p>\n      {numberOfPayments &&\n      <ShowPaymentTable\n      drizzle={this.props.drizzle}\n      drizzleState={this.props.drizzleState}\n      numberOfPayments={numberOfPayments}\n      />\n    }\n      </div>\n    );\n  }\n}\n\nexport default GetContractInfo;\n"]},"metadata":{},"sourceType":"module"}