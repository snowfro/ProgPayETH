{"ast":null,"code":"import React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      paymentIndexes: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n\n    for (let i = 0; i < this.props.numberOfPayments; i++) {\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(i + 1);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(i + 1);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(i + 1);\n      paymentIndexes.push({\n        paymentIndex,\n        requestedIndex,\n        approvedIndex\n      });\n    }\n\n    this.setState({\n      paymentIndexes\n    });\n  }\n\n  render() {\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    let paymentDetails = {};\n    console.log(this.state.paymentIndexes);\n    /*paymentDetails = this.state.paymentIndexes.map(x=>{\n      let rObj = {};\n      rObj['paymentValue'] = 1; //ProgPayETH.paymentNumberToValue[x.paymentIndex];\n      rObj['requested'] = 2; //ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n      rObj['approved'] = 3; //ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n      return rObj;\n      //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n    });*/\n    //console.log(paymentAmounts);\n\n    return {\n      /*<div>\n               {paymentAmounts.map(function(name, index){\n                   return <p>Payment #{index+1} is for {name && parseFloat((web3.utils.fromWei((name.value).toString(), 'ether'))).toFixed(3)}Ξ.</p>;\n                 })}\n      </div>\n      */\n    };\n  }\n\n}\n\nexport default ShowPaymentTable;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/ShowPaymentTable.js"],"names":["React","Web3","web3","givenProvider","ShowPaymentTable","Component","state","paymentIndexes","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","i","numberOfPayments","paymentIndex","methods","cacheCall","requestedIndex","approvedIndex","push","setState","render","drizzleState","paymentDetails","console","log"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAEA,MAAMC,gBAAN,SAA+BJ,KAAK,CAACK,SAArC,CAA+C;AAAA;AAAA;AAAA,SAE/CC,KAF+C,GAEvC;AAACC,MAAAA,cAAc,EAAC;AAAhB,KAFuC;AAAA;;AAK9CC,EAAAA,iBAAiB,GAAG;AAEjB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC;AACA,QAAIN,cAAc,GAAG,EAArB;;AAEA,SAAK,IAAIO,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKJ,KAAL,CAAWK,gBAA3B,EAA6CD,CAAC,EAA9C,EAAiD;AAC/C,YAAME,YAAY,GAAGL,QAAQ,CAACM,OAAT,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDJ,CAAC,GAAC,CAArD,CAArB;AACA,YAAMK,cAAc,GAAGR,QAAQ,CAACM,OAAT,CAAiB,0BAAjB,EAA6CC,SAA7C,CAAuDJ,CAAC,GAAC,CAAzD,CAAvB;AACA,YAAMM,aAAa,GAAGT,QAAQ,CAACM,OAAT,CAAiB,yBAAjB,EAA4CC,SAA5C,CAAsDJ,CAAC,GAAC,CAAxD,CAAtB;AACAP,MAAAA,cAAc,CAACc,IAAf,CAAoB;AAACL,QAAAA,YAAD;AAAeG,QAAAA,cAAf;AAA+BC,QAAAA;AAA/B,OAApB;AACD;;AAED,SAAKE,QAAL,CAAc;AAACf,MAAAA;AAAD,KAAd;AAEF;;AAGFgB,EAAAA,MAAM,GAAG;AAET,UAAM;AAAEV,MAAAA;AAAF,QAAiB,KAAKH,KAAL,CAAWc,YAAX,CAAwBZ,SAA/C;AACA,QAAIa,cAAc,GAAG,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWC,cAAvB;AACA;;;;;;;;AAQA;;AAEI,WACE;AAAC;;;;;;AAAD,KADF;AAQD;;AA9C4C;;AAiD/C,eAAeH,gBAAf","sourcesContent":["\nimport React from \"react\";\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass ShowPaymentTable extends React.Component {\n\nstate = {paymentIndexes:[]};\n\n\n componentDidMount() {\n\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    let paymentIndexes = [];\n\n    for (let i=0; i<this.props.numberOfPayments; i++){\n      const paymentIndex = contract.methods[\"paymentNumberToValue\"].cacheCall(i+1);\n      const requestedIndex = contract.methods[\"paymentNumberToRequested\"].cacheCall(i+1);\n      const approvedIndex = contract.methods[\"paymentNumberToApproved\"].cacheCall(i+1);\n      paymentIndexes.push({paymentIndex, requestedIndex, approvedIndex});\n    }\n\n    this.setState({paymentIndexes});\n\n }\n\n\nrender() {\n\nconst { ProgPayETH } = this.props.drizzleState.contracts;\nlet paymentDetails = {};\nconsole.log(this.state.paymentIndexes);\n/*paymentDetails = this.state.paymentIndexes.map(x=>{\n  let rObj = {};\n  rObj['paymentValue'] = 1; //ProgPayETH.paymentNumberToValue[x.paymentIndex];\n  rObj['requested'] = 2; //ProgPayETH.paymentNumberToRequested[x.requestedIndex];\n  rObj['approved'] = 3; //ProgPayETH.paymentNumberToApproved[x.approvedIndex];\n  return rObj;\n  //return {ProgPayETH.paymentNumberToValue[x.paymentIndex],ProgPayETH.paymentNumberToRequested[x.requestedIndex], ProgPayETH.paymentNumberToApproved[x.approvedIndex]}\n});*/\n//console.log(paymentAmounts);\n\n    return (\n      {/*<div>\n                {paymentAmounts.map(function(name, index){\n                    return <p>Payment #{index+1} is for {name && parseFloat((web3.utils.fromWei((name.value).toString(), 'ether'))).toFixed(3)}Ξ.</p>;\n                  })}\n    </div>\n  */}\n    );\n  }\n}\n\nexport default ShowPaymentTable;\n"]},"metadata":{},"sourceType":"module"}