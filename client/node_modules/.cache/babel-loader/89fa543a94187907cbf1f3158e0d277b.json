{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js'; //import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null,\n      contractAdded: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n    this.addContract();\n  }\n\n  addContract() {\n    const {\n      drizzle\n    } = this.props;\n    var promise = new Promise(function (resolve, reject) {\n      // do a thing, possibly async, then…\n      if (drizzle.web3) {\n        resolve(drizzle);\n      } else {\n        reject(Error(\"It broke\"));\n      }\n    });\n    promise.then(function (result) {\n      const {\n        web3\n      } = result;\n      const address = this.props.match.params.address; //console.log(web3);\n\n      if (web3.utils) {\n        let isETHAddress = web3.utils.isAddress(address) ? address : false;\n        console.log(isETHAddress);\n\n        if (isETHAddress) {\n          var contractConfig = {\n            contractName: \"DynamicProgPayETH\",\n            web3Contract: new web3.eth.Contract(abi, isETHAddress)\n          }; //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n\n          drizzle.addContract(contractConfig);\n        }\n\n        this.setState({\n          cAddress: isETHAddress\n        });\n      }\n    });\n  } //const drizzleState = drizzle.store.getState();\n  //this.setState({cAddress:isETHAddress, drizzleState:drizzleState});\n  //}\n\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    //this.addContract();\n    console.log(this.props.drizzle);\n    console.log(this.state.drizzleState);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","App","state","loading","drizzleState","cAddress","contractAdded","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","addContract","promise","Promise","resolve","reject","web3","Error","then","result","address","match","params","utils","isETHAddress","isAddress","console","log","contractConfig","contractName","web3Contract","eth","Contract","compomentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB,C,CAEA;AACA;;AAIA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC,IAA9C;AAAoDC,MAAAA,aAAa,EAAC;AAAlE,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB,CADkB,CAOlB;;AACA,SAAKC,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMR,YAAY,GAAGI,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIT,YAAY,CAACU,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEb,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KATkB,CAAnB;AAUA,SAAKa,WAAL;AAEC;;AAEDA,EAAAA,WAAW,GAAE;AAEX,UAAM;AAAET,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,QAAIS,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAClD;AAEA,UAAIb,OAAO,CAACc,IAAZ,EAAkB;AAChBF,QAAAA,OAAO,CAACZ,OAAD,CAAP;AACH,OAFC,MAGK;AACPa,QAAAA,MAAM,CAACE,KAAK,CAAC,UAAD,CAAN,CAAN;AACC;AACA,KATa,CAAd;AAWAL,IAAAA,OAAO,CAACM,IAAR,CAAa,UAASC,MAAT,EAAgB;AAC3B,YAAM;AAACH,QAAAA;AAAD,UAASG,MAAf;AACA,YAAMC,OAAO,GAAG,KAAKjB,KAAL,CAAWkB,KAAX,CAAiBC,MAAjB,CAAwBF,OAAxC,CAF2B,CAG3B;;AAEA,UAAGJ,IAAI,CAACO,KAAR,EAAc;AACd,YAAIC,YAAY,GAAGR,IAAI,CAACO,KAAL,CAAWE,SAAX,CAAqBL,OAArB,IAA8BA,OAA9B,GAAsC,KAAzD;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;;AACA,YAAIA,YAAJ,EAAiB;AACjB,cAAII,cAAc,GAAG;AACnBC,YAAAA,YAAY,EAAE,mBADK;AAEnBC,YAAAA,YAAY,EAAE,IAAId,IAAI,CAACe,GAAL,CAASC,QAAb,CAAsBtC,GAAtB,EAA0B8B,YAA1B;AAFK,WAArB,CADiB,CAKjB;;AACAtB,UAAAA,OAAO,CAACS,WAAR,CAAoBiB,cAApB;AACC;;AAEG,aAAKlB,QAAL,CAAc;AAAEX,UAAAA,QAAQ,EAACyB;AAAX,SAAd;AAEH;AAEF,KArBD;AAuBD,GA9DuB,CAiEtB;AACA;AAMF;;;AAEFS,EAAAA,oBAAoB,GAAG;AACrB,SAAK7B,WAAL;AACD;;AAID8B,EAAAA,MAAM,GAAG;AACP;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWD,OAAvB;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWE,YAAvB;AACA,QAAI,KAAKF,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,QAAI,CAAC,KAAKD,KAAL,CAAWG,QAAhB,EAA0B,OAAO,wBAAP;AAC1B,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKI,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKN,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AA/FyB;;AAgG3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\n//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null, contractAdded:false };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n\n\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n    this.addContract();\n\n    }\n\n    addContract(){\n\n      const { drizzle } = this.props;\n      var promise = new Promise(function(resolve, reject) {\n        // do a thing, possibly async, then…\n\n        if (drizzle.web3) {\n          resolve(drizzle);\n      }\n        else {\n      reject(Error(\"It broke\"));\n      }\n      });\n\n      promise.then(function(result){\n        const {web3} = result;\n        const address = this.props.match.params.address;\n        //console.log(web3);\n\n        if(web3.utils){\n        let isETHAddress = web3.utils.isAddress(address)?address:false;\n        console.log(isETHAddress);\n        if (isETHAddress){\n        var contractConfig = {\n          contractName: \"DynamicProgPayETH\",\n          web3Contract: new web3.eth.Contract(abi,isETHAddress)\n        }\n        //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n        drizzle.addContract(contractConfig);\n        }\n\n            this.setState({ cAddress:isETHAddress});\n\n        }\n\n      })\n\n    }\n\n\n      //const drizzleState = drizzle.store.getState();\n      //this.setState({cAddress:isETHAddress, drizzleState:drizzleState});\n\n\n\n\n\n    //}\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    //this.addContract();\n    console.log(this.props.drizzle);\n    console.log(this.state.drizzleState);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}