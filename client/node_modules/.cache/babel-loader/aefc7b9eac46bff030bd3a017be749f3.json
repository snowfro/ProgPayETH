{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/MyDrizzleApp.js\";\n\n/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\nimport React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      payeeIndex: null,\n      payerIndex: null,\n      contractValueIndex: null\n    };\n  }\n\n  componentDidMount() {\n    //access drizzle props within componentDidMount\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n    var fundedIndex = contract.methods[\"contractFunded\"].cacheCall();\n    var nextPaymentIndex = contract.methods[\"nextPayment\"].cacheCall();\n    var remainingBalanceIndex = contract.methods[\"remainingBalance\"].cacheCall();\n    this.setState({\n      payeeIndex,\n      payerIndex,\n      contractValueIndex,\n      numberOfPaymentsIndex,\n      fundedIndex,\n      nextPaymentIndex,\n      remainingBalanceIndex\n    });\n  }\n\n  render() {\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    console.log(ProgPayETH);\n    const payee = ProgPayETH.payee[this.state.payeeIndex];\n    const payer = ProgPayETH.payer[this.state.payerIndex];\n    const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n    const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex];\n    const contractFunded = ProgPayETH.contractFunded[this.state.fundedIndex];\n\n    if (contractFunded) {\n      console.log(contractFunded.value);\n    } //console.log(payee);\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, \"This Contract's Payer is \", payer && payer.value, \" and the Payee is \", payee && payee.value, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, \"This contract is \", contractFunded && contractFunded.value, \" funded. The total value of this contract is \", contractValue && contractValue.value, \" to be paid over \", numberOfPayments && numberOfPayments.value, \" payments.\"));\n  }\n\n}\n\nexport default MyDrizzleApp;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/MyDrizzleApp.js"],"names":["React","MyDrizzleApp","Component","state","payeeIndex","payerIndex","contractValueIndex","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","methods","cacheCall","numberOfPaymentsIndex","fundedIndex","nextPaymentIndex","remainingBalanceIndex","setState","render","drizzleState","console","log","payee","payer","contractValue","contractValueInWei","numberOfPayments","contractFunded","value"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAE3CC,KAF2C,GAEnC;AAACC,MAAAA,UAAU,EAAC,IAAZ;AAAkBC,MAAAA,UAAU,EAAC,IAA7B;AAAmCC,MAAAA,kBAAkB,EAAC;AAAtD,KAFmC;AAAA;;AAK1CC,EAAAA,iBAAiB,GAAG;AAEjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AAEA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC;AAEA,QAAIR,UAAU,GAAGM,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIT,UAAU,GAAGK,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIR,kBAAkB,GAAGI,QAAQ,CAACG,OAAT,CAAiB,oBAAjB,EAAuCC,SAAvC,EAAzB;AACA,QAAIC,qBAAqB,GAAGL,QAAQ,CAACG,OAAT,CAAiB,kBAAjB,EAAqCC,SAArC,EAA5B;AACA,QAAIE,WAAW,GAAGN,QAAQ,CAACG,OAAT,CAAiB,gBAAjB,EAAmCC,SAAnC,EAAlB;AACA,QAAIG,gBAAgB,GAAGP,QAAQ,CAACG,OAAT,CAAiB,aAAjB,EAAgCC,SAAhC,EAAvB;AACA,QAAII,qBAAqB,GAAGR,QAAQ,CAACG,OAAT,CAAiB,kBAAjB,EAAqCC,SAArC,EAA5B;AAEA,SAAKK,QAAL,CAAc;AAACf,MAAAA,UAAD;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA,kBAAzB;AAA6CS,MAAAA,qBAA7C;AAAoEC,MAAAA,WAApE;AAAiFC,MAAAA,gBAAjF;AAAmGC,MAAAA;AAAnG,KAAd;AAEF;;AAEFE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA;AAAF,QAAiB,KAAKH,KAAL,CAAWY,YAAX,CAAwBV,SAA/C;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AAEA,UAAMY,KAAK,GAAGZ,UAAU,CAACY,KAAX,CAAiB,KAAKrB,KAAL,CAAWC,UAA5B,CAAd;AACA,UAAMqB,KAAK,GAAGb,UAAU,CAACa,KAAX,CAAiB,KAAKtB,KAAL,CAAWE,UAA5B,CAAd;AACA,UAAMqB,aAAa,GAAGd,UAAU,CAACe,kBAAX,CAA8B,KAAKxB,KAAL,CAAWG,kBAAzC,CAAtB;AACA,UAAMsB,gBAAgB,GAAGhB,UAAU,CAACgB,gBAAX,CAA4B,KAAKzB,KAAL,CAAWY,qBAAvC,CAAzB;AACA,UAAMc,cAAc,GAAGjB,UAAU,CAACiB,cAAX,CAA0B,KAAK1B,KAAL,CAAWa,WAArC,CAAvB;;AACA,QAAIa,cAAJ,EAAmB;AACjBP,MAAAA,OAAO,CAACC,GAAR,CAAYM,cAAc,CAACC,KAA3B;AACD,KAXM,CAYP;;;AACE,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA6BL,KAAK,IAAIA,KAAK,CAACK,KAA5C,wBAAqEN,KAAK,IAAIA,KAAK,CAACM,KAApF,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqBD,cAAc,IAAIA,cAAc,CAACC,KAAtD,mDACqCJ,aAAa,IAAIA,aAAa,CAACI,KADpE,uBAC4FF,gBAAgB,IAAIA,gBAAgB,CAACE,KADjI,eAFA,CADF;AASD;;AA9CwC;;AAiD3C,eAAe7B,YAAf","sourcesContent":["/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\n\nimport React from \"react\";\nclass MyDrizzleApp extends React.Component {\n\nstate = {payeeIndex:null, payerIndex:null, contractValueIndex:null};\n\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n    var fundedIndex = contract.methods[\"contractFunded\"].cacheCall();\n    var nextPaymentIndex = contract.methods[\"nextPayment\"].cacheCall();\n    var remainingBalanceIndex = contract.methods[\"remainingBalance\"].cacheCall();\n\n    this.setState({payeeIndex, payerIndex, contractValueIndex, numberOfPaymentsIndex, fundedIndex, nextPaymentIndex, remainingBalanceIndex});\n\n }\n\nrender() {\n  const { ProgPayETH } = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  const payer = ProgPayETH.payer[this.state.payerIndex];\n  const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n  const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex];\n  const contractFunded = ProgPayETH.contractFunded[this.state.fundedIndex];\n  if (contractFunded){\n    console.log(contractFunded.value);\n  }\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payer is {payer && payer.value} and the Payee is {payee && payee.value}.</p>\n      <p>This contract is {contractFunded && contractFunded.value} funded.\n      The total value of this contract is {contractValue && contractValue.value} to be paid over {numberOfPayments && numberOfPayments.value} payments.</p>\n\n\n      </div>\n    );\n  }\n}\n\nexport default MyDrizzleApp;\n"]},"metadata":{},"sourceType":"module"}