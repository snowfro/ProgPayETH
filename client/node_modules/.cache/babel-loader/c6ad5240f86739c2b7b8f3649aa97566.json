{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const address = this.props.match.params.address; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState,\n          cAddress: address\n        });\n      }\n    });\n    var contractConfig = {\n      contractName: address,\n      web3Contract: new web3.eth.Contract(abi)\n    };\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    console.log(this.state.cAddress);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","Web3","web3","givenProvider","App","state","loading","drizzleState","cAddress","componentDidMount","drizzle","props","address","match","params","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","contractConfig","contractName","web3Contract","eth","Contract","compomentWillUnmount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAIA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC;AAA9C,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,OAAO,GAAG,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBF,OAAxC,CAFkB,CAIlB;;AACA,SAAKG,WAAL,GAAmBL,OAAO,CAACM,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMV,YAAY,GAAGG,OAAO,CAACM,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIX,YAAY,CAACY,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEf,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,YAAlB;AAAiCC,UAAAA,QAAQ,EAACI;AAA1C,SAAd;AACD;AACF,KATkB,CAAnB;AAWA,QAAIU,cAAc,GAAG;AACnBC,MAAAA,YAAY,EAAEX,OADK;AAEnBY,MAAAA,YAAY,EAAE,IAAItB,IAAI,CAACuB,GAAL,CAASC,QAAb,CAAsB1B,GAAtB;AAFK,KAArB;AAID;;AAED2B,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,WAAL;AACD;;AAIDa,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,KAAL,CAAWG,QAAvB;AACA,QAAI,KAAKH,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKK,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AA3CyB;;AA4C3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const address = this.props.match.params.address;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState , cAddress:address});\n      }\n    });\n\n    var contractConfig = {\n      contractName: address,\n      web3Contract: new web3.eth.Contract(abi)\n}\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    console.log(this.state.cAddress);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}