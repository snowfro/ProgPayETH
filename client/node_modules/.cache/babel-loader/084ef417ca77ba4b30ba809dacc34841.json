{"ast":null,"code":"// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function (_ref) {\n  var fsp = _ref.fsp,\n      files = _ref.files,\n      os = _ref.os,\n      path = _ref.path,\n      child_process = _ref.child_process,\n      mimetype = _ref.mimetype,\n      defaultArchives = _ref.defaultArchives,\n      request = _ref.request,\n      downloadUrl = _ref.downloadUrl,\n      bytes = _ref.bytes,\n      hash = _ref.hash,\n      pick = _ref.pick; // ∀ a . String -> JSON -> Map String a -o Map String a\n  //   Inserts a key/val pair in an object impurely.\n\n  var impureInsert = function impureInsert(key) {\n    return function (val) {\n      return function (map) {\n        return map[key] = val, map;\n      };\n    };\n  }; // String -> JSON -> Map String JSON\n  //   Merges an array of keys and an array of vals into an object.\n\n\n  var toMap = function toMap(keys) {\n    return function (vals) {\n      var map = {};\n\n      for (var i = 0, l = keys.length; i < l; ++i) {\n        map[keys[i]] = vals[i];\n      }\n\n      return map;\n    };\n  }; // ∀ a . Map String a -> Map String a -> Map String a\n  //   Merges two maps into one.\n\n\n  var merge = function merge(a) {\n    return function (b) {\n      var map = {};\n\n      for (var key in a) {\n        map[key] = a[key];\n      }\n\n      for (var _key in b) {\n        map[_key] = b[_key];\n      }\n\n      return map;\n    };\n  }; // ∀ a . [a] -> [a] -> Bool\n\n\n  var equals = function equals(a) {\n    return function (b) {\n      if (a.length !== b.length) {\n        return false;\n      } else {\n        for (var i = 0, l = a.length; i < a; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n      }\n\n      return true;\n    };\n  }; // String -> String -> String\n\n\n  var rawUrl = function rawUrl(swarmUrl) {\n    return function (hash) {\n      return swarmUrl + \"/bzzr:/\" + hash;\n    };\n  }; // String -> String -> Promise Uint8Array\n  //   Gets the raw contents of a Swarm hash address.\n\n\n  var downloadData = function downloadData(swarmUrl) {\n    return function (hash) {\n      return request(rawUrl(swarmUrl)(hash), {\n        responseType: \"arraybuffer\"\n      }).then(function (arrayBuffer) {\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];\n        if (equals(uint8Array)(error404)) throw \"Error 404.\";\n        return uint8Array;\n      });\n    };\n  }; // type Entry = {\"type\": String, \"hash\": String}\n  // type File = {\"type\": String, \"data\": Uint8Array}\n  // String -> String -> Promise (Map String Entry)\n  //   Solves the manifest of a Swarm address recursively.\n  //   Returns a map from full paths to entries.\n\n\n  var downloadEntries = function downloadEntries(swarmUrl) {\n    return function (hash) {\n      var search = function search(hash) {\n        return function (path) {\n          return function (routes) {\n            // Formats an entry to the Swarm.js type.\n            var format = function format(entry) {\n              return {\n                type: entry.contentType,\n                hash: entry.hash\n              };\n            }; // To download a single entry:\n            //   if type is bzz-manifest, go deeper\n            //   if not, add it to the routing table\n\n\n            var downloadEntry = function downloadEntry(entry) {\n              if (entry.path === undefined) {\n                return Promise.resolve();\n              } else {\n                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n              }\n            }; // Downloads the initial manifest and then each entry.\n\n\n            return downloadData(swarmUrl)(hash).then(function (text) {\n              return JSON.parse(toString(text)).entries;\n            }).then(function (entries) {\n              return Promise.all(entries.map(downloadEntry));\n            }).then(function () {\n              return routes;\n            });\n          };\n        };\n      };\n\n      return search(hash)(\"\")({});\n    };\n  }; // String -> String -> Promise (Map String String)\n  //   Same as `downloadEntries`, but returns only hashes (no types).\n\n\n  var downloadRoutes = function downloadRoutes(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {\n          return entries[route].hash;\n        }));\n      });\n    };\n  }; // String -> String -> Promise (Map String File)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectory = function downloadDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        var paths = Object.keys(entries);\n        var hashs = paths.map(function (path) {\n          return entries[path].hash;\n        });\n        var types = paths.map(function (path) {\n          return entries[path].type;\n        });\n        var datas = hashs.map(downloadData(swarmUrl));\n\n        var files = function files(datas) {\n          return datas.map(function (data, i) {\n            return {\n              type: types[i],\n              data: data\n            };\n          });\n        };\n\n        return Promise.all(datas).then(function (datas) {\n          return toMap(paths)(files(datas));\n        });\n      });\n    };\n  }; // String -> String -> String -> Promise String\n  //   Gets the raw contents of a Swarm hash address.\n  //   Returns a promise with the downloaded file path.\n\n\n  var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n    return function (hash) {\n      return function (filePath) {\n        return files.download(rawUrl(swarmUrl)(hash))(filePath);\n      };\n    };\n  }; // String -> String -> String -> Promise (Map String String)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n    return function (hash) {\n      return function (dirPath) {\n        return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {\n          var downloads = [];\n\n          for (var route in routingTable) {\n            if (route.length > 0) {\n              var filePath = path.join(dirPath, route);\n              downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n            }\n\n            ;\n          }\n\n          ;\n          return Promise.all(downloads).then(function () {\n            return dirPath;\n          });\n        });\n      };\n    };\n  }; // String -> Uint8Array -> Promise String\n  //   Uploads raw data to Swarm.\n  //   Returns a promise with the uploaded hash.\n\n\n  var uploadData = function uploadData(swarmUrl) {\n    return function (data) {\n      return request(swarmUrl + \"/bzzr:/\", {\n        body: typeof data === \"string\" ? fromString(data) : data,\n        method: \"POST\"\n      });\n    };\n  }; // String -> String -> String -> File -> Promise String\n  //   Uploads a file to the Swarm manifest at a given hash, under a specific\n  //   route. Returns a promise containing the uploaded hash.\n  //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n  //   error 404 (bad request), so we retry up to 3 times. Why?\n\n\n  var uploadToManifest = function uploadToManifest(swarmUrl) {\n    return function (hash) {\n      return function (route) {\n        return function (file) {\n          var attempt = function attempt(n) {\n            var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n            var url = swarmUrl + \"/bzz:/\" + hash + slashRoute;\n            var opt = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type\n              },\n              body: file.data\n            };\n            return request(url, opt).then(function (response) {\n              if (response.indexOf(\"error\") !== -1) {\n                throw response;\n              }\n\n              return response;\n            }).catch(function (e) {\n              return n > 0 && attempt(n - 1);\n            });\n          };\n\n          return attempt(3);\n        };\n      };\n    };\n  }; // String -> {type: String, data: Uint8Array} -> Promise String\n\n\n  var uploadFile = function uploadFile(swarmUrl) {\n    return function (file) {\n      return uploadDirectory(swarmUrl)({\n        \"\": file\n      });\n    };\n  }; // String -> String -> Promise String\n\n\n  var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fsp.readFile(filePath).then(function (data) {\n        return uploadFile(swarmUrl)({\n          type: mimetype.lookup(filePath),\n          data: data\n        });\n      });\n    };\n  }; // String -> Map String File -> Promise String\n  //   Uploads a directory to Swarm. The directory is\n  //   represented as a map of routes and files.\n  //   A default path is encoded by having a \"\" route.\n\n\n  var uploadDirectory = function uploadDirectory(swarmUrl) {\n    return function (directory) {\n      return uploadData(swarmUrl)(\"{}\").then(function (hash) {\n        var uploadRoute = function uploadRoute(route) {\n          return function (hash) {\n            return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n          };\n        };\n\n        var uploadToHash = function uploadToHash(hash, route) {\n          return hash.then(uploadRoute(route));\n        };\n\n        return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n      });\n    };\n  }; // String -> Promise String\n\n\n  var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fsp.readFile(filePath).then(uploadData(swarmUrl));\n    };\n  }; // String -> Nullable String -> String -> Promise String\n\n\n  var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n    return function (defaultPath) {\n      return function (dirPath) {\n        return files.directoryTree(dirPath).then(function (fullPaths) {\n          return Promise.all(fullPaths.map(function (path) {\n            return fsp.readFile(path);\n          })).then(function (datas) {\n            var paths = fullPaths.map(function (path) {\n              return path.slice(dirPath.length);\n            });\n            var types = fullPaths.map(function (path) {\n              return mimetype.lookup(path) || \"text/plain\";\n            });\n            return toMap(paths)(datas.map(function (data, i) {\n              return {\n                type: types[i],\n                data: data\n              };\n            }));\n          });\n        }).then(function (directory) {\n          return merge(defaultPath ? {\n            \"\": directory[defaultPath]\n          } : {})(directory);\n        }).then(uploadDirectory(swarmUrl));\n      };\n    };\n  }; // String -> UploadInfo -> Promise String\n  //   Simplified multi-type upload which calls the correct\n  //   one based on the type of the argument given.\n\n\n  var _upload = function _upload(swarmUrl) {\n    return function (arg) {\n      // Upload raw data from browser\n      if (arg.pick === \"data\") {\n        return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser\n      } else if (arg.pick === \"file\") {\n        return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser\n      } else if (arg.pick === \"directory\") {\n        return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk\n      } else if (arg.path) {\n        switch (arg.kind) {\n          case \"data\":\n            return uploadDataFromDisk(swarmUrl)(arg.path);\n\n          case \"file\":\n            return uploadFileFromDisk(swarmUrl)(arg.path);\n\n          case \"directory\":\n            return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n        }\n\n        ; // Upload UTF-8 string or raw data (buffer)\n      } else if (arg.length || typeof arg === \"string\") {\n        return uploadData(swarmUrl)(arg); // Upload directory with JSON\n      } else if (arg instanceof Object) {\n        return uploadDirectory(swarmUrl)(arg);\n      }\n\n      return Promise.reject(new Error(\"Bad arguments\"));\n    };\n  }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n  //   Simplified multi-type download which calls the correct function based on\n  //   the type of the argument given, and on whether the Swwarm address has a\n  //   directory or a file.\n\n\n  var _download = function _download(swarmUrl) {\n    return function (hash) {\n      return function (path) {\n        return isDirectory(swarmUrl)(hash).then(function (isDir) {\n          if (isDir) {\n            return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n          } else {\n            return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n          }\n        });\n      };\n    };\n  }; // String -> Promise String\n  //   Downloads the Swarm binaries into a path. Returns a promise that only\n  //   resolves when the exact Swarm file is there, and verified to be correct.\n  //   If it was already there to begin with, skips the download.\n\n\n  var downloadBinary = function downloadBinary(path, archives) {\n    var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n    var archive = (archives || defaultArchives)[system];\n    var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n    var archiveMD5 = archive.archiveMD5;\n    var binaryMD5 = archive.binaryMD5;\n    return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n  }; // type SwarmSetup = {\n  //   account : String,\n  //   password : String,\n  //   dataDir : String,\n  //   binPath : String,\n  //   ensApi : String,\n  //   onDownloadProgress : Number ~> (),\n  //   archives : [{\n  //     archive: String,\n  //     binaryMD5: String,\n  //     archiveMD5: String\n  //   }]\n  // }\n  // SwarmSetup ~> Promise Process\n  //   Starts the Swarm process.\n\n\n  var startProcess = function startProcess(swarmSetup) {\n    return new Promise(function (resolve, reject) {\n      var spawn = child_process.spawn;\n\n      var hasString = function hasString(str) {\n        return function (buffer) {\n          return ('' + buffer).indexOf(str) !== -1;\n        };\n      };\n\n      var account = swarmSetup.account,\n          password = swarmSetup.password,\n          dataDir = swarmSetup.dataDir,\n          ensApi = swarmSetup.ensApi,\n          privateKey = swarmSetup.privateKey;\n      var STARTUP_TIMEOUT_SECS = 3;\n      var WAITING_PASSWORD = 0;\n      var STARTING = 1;\n      var LISTENING = 2;\n      var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n      var LISTENING_HOOK = \"Swarm http proxy started\";\n      var state = WAITING_PASSWORD;\n      var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);\n\n      var handleProcessOutput = function handleProcessOutput(data) {\n        if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n          setTimeout(function () {\n            state = STARTING;\n            swarmProcess.stdin.write(password + '\\n');\n          }, 500);\n        } else if (hasString(LISTENING_HOOK)(data)) {\n          state = LISTENING;\n          clearTimeout(timeout);\n          resolve(swarmProcess);\n        }\n      };\n\n      swarmProcess.stdout.on('data', handleProcessOutput);\n      swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));\n\n      var restart = function restart() {\n        return startProcess(swarmSetup).then(resolve).catch(reject);\n      };\n\n      var error = function error() {\n        return reject(new Error(\"Couldn't start swarm process.\"));\n      };\n\n      var timeout = setTimeout(error, 20000);\n    });\n  }; // Process ~> Promise ()\n  //   Stops the Swarm process.\n\n\n  var stopProcess = function stopProcess(process) {\n    return new Promise(function (resolve, reject) {\n      process.stderr.removeAllListeners('data');\n      process.stdout.removeAllListeners('data');\n      process.stdin.removeAllListeners('error');\n      process.removeAllListeners('error');\n      process.removeAllListeners('exit');\n      process.kill('SIGINT');\n      var killTimeout = setTimeout(function () {\n        return process.kill('SIGKILL');\n      }, 8000);\n      process.once('close', function () {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n    });\n  }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n  //   Receives a Swarm configuration object and a callback function. It then\n  //   checks if a local Swarm node is running. If no local Swarm is found, it\n  //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n  //   starts the Swarm process and calls the callback function with an API\n  //   object using the local node. That callback must return a promise which\n  //   will resolve when it is done using the API, so that this function can\n  //   close the Swarm process properly. Returns a promise that resolves when the\n  //   user is done with the API and the Swarm process is closed.\n  //   TODO: check if Swarm process is already running (improve `isAvailable`)\n\n\n  var local = function local(swarmSetup) {\n    return function (useAPI) {\n      return _isAvailable(\"http://localhost:8500\").then(function (isAvailable) {\n        return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {\n          return (swarmSetup.onProgress || function () {})(data.length);\n        }).then(function () {\n          return startProcess(swarmSetup);\n        }).then(function (process) {\n          return useAPI(at(\"http://localhost:8500\")).then(function () {\n            return process;\n          });\n        }).then(stopProcess);\n      });\n    };\n  }; // String ~> Promise Bool\n  //   Returns true if Swarm is available on `url`.\n  //   Perfoms a test upload to determine that.\n  //   TODO: improve this?\n\n\n  var _isAvailable = function _isAvailable(swarmUrl) {\n    var testFile = \"test\";\n    var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n    return uploadData(swarmUrl)(testFile).then(function (hash) {\n      return hash === testHash;\n    }).catch(function () {\n      return false;\n    });\n  }; // String -> String ~> Promise Bool\n  //   Returns a Promise which is true if that Swarm address is a directory.\n  //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n  //   TODO: improve this?\n\n\n  var isDirectory = function isDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadData(swarmUrl)(hash).then(function (data) {\n        try {\n          return !!JSON.parse(toString(data)).entries;\n        } catch (e) {\n          return false;\n        }\n      });\n    };\n  }; // Uncurries a function; used to allow the f(x,y,z) style on exports.\n\n\n  var uncurry = function uncurry(f) {\n    return function (a, b, c, d, e) {\n      var p; // Hardcoded because efficiency (`arguments` is very slow).\n\n      if (typeof a !== \"undefined\") p = f(a);\n      if (typeof b !== \"undefined\") p = f(b);\n      if (typeof c !== \"undefined\") p = f(c);\n      if (typeof d !== \"undefined\") p = f(d);\n      if (typeof e !== \"undefined\") p = f(e);\n      return p;\n    };\n  }; // () -> Promise Bool\n  //   Not sure how to mock Swarm to test it properly. Ideas?\n\n\n  var test = function test() {\n    return Promise.resolve(true);\n  }; // Uint8Array -> String\n\n\n  var toString = function toString(uint8Array) {\n    return bytes.toString(bytes.fromUint8Array(uint8Array));\n  }; // String -> Uint8Array\n\n\n  var fromString = function fromString(string) {\n    return bytes.toUint8Array(bytes.fromString(string));\n  }; // String -> SwarmAPI\n  //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n\n\n  var at = function at(swarmUrl) {\n    return {\n      download: function download(hash, path) {\n        return _download(swarmUrl)(hash)(path);\n      },\n      downloadData: uncurry(downloadData(swarmUrl)),\n      downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n      downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n      downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n      downloadEntries: uncurry(downloadEntries(swarmUrl)),\n      downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n      isAvailable: function isAvailable() {\n        return _isAvailable(swarmUrl);\n      },\n      upload: function upload(arg) {\n        return _upload(swarmUrl)(arg);\n      },\n      uploadData: uncurry(uploadData(swarmUrl)),\n      uploadFile: uncurry(uploadFile(swarmUrl)),\n      uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n      uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n      uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n      uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n      uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n      pick: pick,\n      hash: hash,\n      fromString: fromString,\n      toString: toString\n    };\n  };\n\n  return {\n    at: at,\n    local: local,\n    download: _download,\n    downloadBinary: downloadBinary,\n    downloadData: downloadData,\n    downloadDataToDisk: downloadDataToDisk,\n    downloadDirectory: downloadDirectory,\n    downloadDirectoryToDisk: downloadDirectoryToDisk,\n    downloadEntries: downloadEntries,\n    downloadRoutes: downloadRoutes,\n    isAvailable: _isAvailable,\n    startProcess: startProcess,\n    stopProcess: stopProcess,\n    upload: _upload,\n    uploadData: uploadData,\n    uploadDataFromDisk: uploadDataFromDisk,\n    uploadFile: uploadFile,\n    uploadFileFromDisk: uploadFileFromDisk,\n    uploadDirectory: uploadDirectory,\n    uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n    uploadToManifest: uploadToManifest,\n    pick: pick,\n    hash: hash,\n    fromString: fromString,\n    toString: toString\n  };\n};","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/node_modules/drizzle/node_modules/swarm-js/lib/swarm.js"],"names":["module","exports","_ref","fsp","files","os","path","child_process","mimetype","defaultArchives","request","downloadUrl","bytes","hash","pick","impureInsert","key","val","map","toMap","keys","vals","i","l","length","merge","a","b","_key","equals","rawUrl","swarmUrl","downloadData","responseType","then","arrayBuffer","uint8Array","Uint8Array","error404","downloadEntries","search","routes","format","entry","type","contentType","downloadEntry","undefined","Promise","resolve","text","JSON","parse","toString","entries","all","downloadRoutes","Object","route","downloadDirectory","paths","hashs","types","datas","data","downloadDataToDisk","filePath","download","downloadDirectoryToDisk","dirPath","routingTable","downloads","join","push","uploadData","body","fromString","method","uploadToManifest","file","attempt","n","slashRoute","url","opt","headers","response","indexOf","catch","e","uploadFile","uploadDirectory","uploadFileFromDisk","readFile","lookup","directory","uploadRoute","uploadToHash","reduce","uploadDataFromDisk","uploadDirectoryFromDisk","defaultPath","directoryTree","fullPaths","slice","_upload","arg","kind","defaultFile","reject","Error","_download","isDirectory","isDir","downloadBinary","archives","system","platform","replace","arch","archive","archiveUrl","archiveMD5","binaryMD5","safeDownloadArchived","startProcess","swarmSetup","spawn","hasString","str","buffer","account","password","dataDir","ensApi","privateKey","STARTUP_TIMEOUT_SECS","WAITING_PASSWORD","STARTING","LISTENING","PASSWORD_PROMPT_HOOK","LISTENING_HOOK","state","swarmProcess","binPath","handleProcessOutput","setTimeout","stdin","write","clearTimeout","timeout","stdout","on","stderr","restart","error","stopProcess","process","removeAllListeners","kill","killTimeout","once","local","useAPI","_isAvailable","isAvailable","at","onData","onProgress","testFile","testHash","uncurry","f","c","d","p","test","fromUint8Array","string","toUint8Array","upload"],"mappings":"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","sourcesContent":["// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function (_ref) {\n  var fsp = _ref.fsp,\n      files = _ref.files,\n      os = _ref.os,\n      path = _ref.path,\n      child_process = _ref.child_process,\n      mimetype = _ref.mimetype,\n      defaultArchives = _ref.defaultArchives,\n      request = _ref.request,\n      downloadUrl = _ref.downloadUrl,\n      bytes = _ref.bytes,\n      hash = _ref.hash,\n      pick = _ref.pick;\n\n\n  // ∀ a . String -> JSON -> Map String a -o Map String a\n  //   Inserts a key/val pair in an object impurely.\n  var impureInsert = function impureInsert(key) {\n    return function (val) {\n      return function (map) {\n        return map[key] = val, map;\n      };\n    };\n  };\n\n  // String -> JSON -> Map String JSON\n  //   Merges an array of keys and an array of vals into an object.\n  var toMap = function toMap(keys) {\n    return function (vals) {\n      var map = {};\n      for (var i = 0, l = keys.length; i < l; ++i) {\n        map[keys[i]] = vals[i];\n      }return map;\n    };\n  };\n\n  // ∀ a . Map String a -> Map String a -> Map String a\n  //   Merges two maps into one.\n  var merge = function merge(a) {\n    return function (b) {\n      var map = {};\n      for (var key in a) {\n        map[key] = a[key];\n      }for (var _key in b) {\n        map[_key] = b[_key];\n      }return map;\n    };\n  };\n\n  // ∀ a . [a] -> [a] -> Bool\n  var equals = function equals(a) {\n    return function (b) {\n      if (a.length !== b.length) {\n        return false;\n      } else {\n        for (var i = 0, l = a.length; i < a; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n      }\n      return true;\n    };\n  };\n\n  // String -> String -> String\n  var rawUrl = function rawUrl(swarmUrl) {\n    return function (hash) {\n      return swarmUrl + \"/bzzr:/\" + hash;\n    };\n  };\n\n  // String -> String -> Promise Uint8Array\n  //   Gets the raw contents of a Swarm hash address.\n  var downloadData = function downloadData(swarmUrl) {\n    return function (hash) {\n      return request(rawUrl(swarmUrl)(hash), { responseType: \"arraybuffer\" }).then(function (arrayBuffer) {\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];\n        if (equals(uint8Array)(error404)) throw \"Error 404.\";\n        return uint8Array;\n      });\n    };\n  };\n\n  // type Entry = {\"type\": String, \"hash\": String}\n  // type File = {\"type\": String, \"data\": Uint8Array}\n\n  // String -> String -> Promise (Map String Entry)\n  //   Solves the manifest of a Swarm address recursively.\n  //   Returns a map from full paths to entries.\n  var downloadEntries = function downloadEntries(swarmUrl) {\n    return function (hash) {\n      var search = function search(hash) {\n        return function (path) {\n          return function (routes) {\n            // Formats an entry to the Swarm.js type.\n            var format = function format(entry) {\n              return {\n                type: entry.contentType,\n                hash: entry.hash };\n            };\n\n            // To download a single entry:\n            //   if type is bzz-manifest, go deeper\n            //   if not, add it to the routing table\n            var downloadEntry = function downloadEntry(entry) {\n              if (entry.path === undefined) {\n                return Promise.resolve();\n              } else {\n                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n              }\n            };\n\n            // Downloads the initial manifest and then each entry.\n            return downloadData(swarmUrl)(hash).then(function (text) {\n              return JSON.parse(toString(text)).entries;\n            }).then(function (entries) {\n              return Promise.all(entries.map(downloadEntry));\n            }).then(function () {\n              return routes;\n            });\n          };\n        };\n      };\n\n      return search(hash)(\"\")({});\n    };\n  };\n\n  // String -> String -> Promise (Map String String)\n  //   Same as `downloadEntries`, but returns only hashes (no types).\n  var downloadRoutes = function downloadRoutes(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {\n          return entries[route].hash;\n        }));\n      });\n    };\n  };\n\n  // String -> String -> Promise (Map String File)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n  var downloadDirectory = function downloadDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        var paths = Object.keys(entries);\n        var hashs = paths.map(function (path) {\n          return entries[path].hash;\n        });\n        var types = paths.map(function (path) {\n          return entries[path].type;\n        });\n        var datas = hashs.map(downloadData(swarmUrl));\n        var files = function files(datas) {\n          return datas.map(function (data, i) {\n            return { type: types[i], data: data };\n          });\n        };\n        return Promise.all(datas).then(function (datas) {\n          return toMap(paths)(files(datas));\n        });\n      });\n    };\n  };\n\n  // String -> String -> String -> Promise String\n  //   Gets the raw contents of a Swarm hash address.\n  //   Returns a promise with the downloaded file path.\n  var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n    return function (hash) {\n      return function (filePath) {\n        return files.download(rawUrl(swarmUrl)(hash))(filePath);\n      };\n    };\n  };\n\n  // String -> String -> String -> Promise (Map String String)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n  var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n    return function (hash) {\n      return function (dirPath) {\n        return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {\n          var downloads = [];\n          for (var route in routingTable) {\n            if (route.length > 0) {\n              var filePath = path.join(dirPath, route);\n              downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n            };\n          };\n          return Promise.all(downloads).then(function () {\n            return dirPath;\n          });\n        });\n      };\n    };\n  };\n\n  // String -> Uint8Array -> Promise String\n  //   Uploads raw data to Swarm.\n  //   Returns a promise with the uploaded hash.\n  var uploadData = function uploadData(swarmUrl) {\n    return function (data) {\n      return request(swarmUrl + \"/bzzr:/\", {\n        body: typeof data === \"string\" ? fromString(data) : data,\n        method: \"POST\" });\n    };\n  };\n\n  // String -> String -> String -> File -> Promise String\n  //   Uploads a file to the Swarm manifest at a given hash, under a specific\n  //   route. Returns a promise containing the uploaded hash.\n  //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n  //   error 404 (bad request), so we retry up to 3 times. Why?\n  var uploadToManifest = function uploadToManifest(swarmUrl) {\n    return function (hash) {\n      return function (route) {\n        return function (file) {\n          var attempt = function attempt(n) {\n            var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n            var url = swarmUrl + \"/bzz:/\" + hash + slashRoute;\n            var opt = {\n              method: \"PUT\",\n              headers: { \"Content-Type\": file.type },\n              body: file.data };\n            return request(url, opt).then(function (response) {\n              if (response.indexOf(\"error\") !== -1) {\n                throw response;\n              }\n              return response;\n            }).catch(function (e) {\n              return n > 0 && attempt(n - 1);\n            });\n          };\n          return attempt(3);\n        };\n      };\n    };\n  };\n\n  // String -> {type: String, data: Uint8Array} -> Promise String\n  var uploadFile = function uploadFile(swarmUrl) {\n    return function (file) {\n      return uploadDirectory(swarmUrl)({ \"\": file });\n    };\n  };\n\n  // String -> String -> Promise String\n  var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fsp.readFile(filePath).then(function (data) {\n        return uploadFile(swarmUrl)({ type: mimetype.lookup(filePath), data: data });\n      });\n    };\n  };\n\n  // String -> Map String File -> Promise String\n  //   Uploads a directory to Swarm. The directory is\n  //   represented as a map of routes and files.\n  //   A default path is encoded by having a \"\" route.\n  var uploadDirectory = function uploadDirectory(swarmUrl) {\n    return function (directory) {\n      return uploadData(swarmUrl)(\"{}\").then(function (hash) {\n        var uploadRoute = function uploadRoute(route) {\n          return function (hash) {\n            return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n          };\n        };\n        var uploadToHash = function uploadToHash(hash, route) {\n          return hash.then(uploadRoute(route));\n        };\n        return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n      });\n    };\n  };\n\n  // String -> Promise String\n  var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fsp.readFile(filePath).then(uploadData(swarmUrl));\n    };\n  };\n\n  // String -> Nullable String -> String -> Promise String\n  var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n    return function (defaultPath) {\n      return function (dirPath) {\n        return files.directoryTree(dirPath).then(function (fullPaths) {\n          return Promise.all(fullPaths.map(function (path) {\n            return fsp.readFile(path);\n          })).then(function (datas) {\n            var paths = fullPaths.map(function (path) {\n              return path.slice(dirPath.length);\n            });\n            var types = fullPaths.map(function (path) {\n              return mimetype.lookup(path) || \"text/plain\";\n            });\n            return toMap(paths)(datas.map(function (data, i) {\n              return { type: types[i], data: data };\n            }));\n          });\n        }).then(function (directory) {\n          return merge(defaultPath ? { \"\": directory[defaultPath] } : {})(directory);\n        }).then(uploadDirectory(swarmUrl));\n      };\n    };\n  };\n\n  // String -> UploadInfo -> Promise String\n  //   Simplified multi-type upload which calls the correct\n  //   one based on the type of the argument given.\n  var _upload = function _upload(swarmUrl) {\n    return function (arg) {\n      // Upload raw data from browser\n      if (arg.pick === \"data\") {\n        return pick.data().then(uploadData(swarmUrl));\n\n        // Upload a file from browser\n      } else if (arg.pick === \"file\") {\n        return pick.file().then(uploadFile(swarmUrl));\n\n        // Upload a directory from browser\n      } else if (arg.pick === \"directory\") {\n        return pick.directory().then(uploadDirectory(swarmUrl));\n\n        // Upload directory/file from disk\n      } else if (arg.path) {\n        switch (arg.kind) {\n          case \"data\":\n            return uploadDataFromDisk(swarmUrl)(arg.path);\n          case \"file\":\n            return uploadFileFromDisk(swarmUrl)(arg.path);\n          case \"directory\":\n            return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n        };\n\n        // Upload UTF-8 string or raw data (buffer)\n      } else if (arg.length || typeof arg === \"string\") {\n        return uploadData(swarmUrl)(arg);\n\n        // Upload directory with JSON\n      } else if (arg instanceof Object) {\n        return uploadDirectory(swarmUrl)(arg);\n      }\n\n      return Promise.reject(new Error(\"Bad arguments\"));\n    };\n  };\n\n  // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n  //   Simplified multi-type download which calls the correct function based on\n  //   the type of the argument given, and on whether the Swwarm address has a\n  //   directory or a file.\n  var _download = function _download(swarmUrl) {\n    return function (hash) {\n      return function (path) {\n        return isDirectory(swarmUrl)(hash).then(function (isDir) {\n          if (isDir) {\n            return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n          } else {\n            return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n          }\n        });\n      };\n    };\n  };\n\n  // String -> Promise String\n  //   Downloads the Swarm binaries into a path. Returns a promise that only\n  //   resolves when the exact Swarm file is there, and verified to be correct.\n  //   If it was already there to begin with, skips the download.\n  var downloadBinary = function downloadBinary(path, archives) {\n    var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n    var archive = (archives || defaultArchives)[system];\n    var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n    var archiveMD5 = archive.archiveMD5;\n    var binaryMD5 = archive.binaryMD5;\n    return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n  };\n\n  // type SwarmSetup = {\n  //   account : String,\n  //   password : String,\n  //   dataDir : String,\n  //   binPath : String,\n  //   ensApi : String,\n  //   onDownloadProgress : Number ~> (),\n  //   archives : [{\n  //     archive: String,\n  //     binaryMD5: String,\n  //     archiveMD5: String\n  //   }]\n  // }\n\n  // SwarmSetup ~> Promise Process\n  //   Starts the Swarm process.\n  var startProcess = function startProcess(swarmSetup) {\n    return new Promise(function (resolve, reject) {\n      var spawn = child_process.spawn;\n\n\n      var hasString = function hasString(str) {\n        return function (buffer) {\n          return ('' + buffer).indexOf(str) !== -1;\n        };\n      };\n      var account = swarmSetup.account,\n          password = swarmSetup.password,\n          dataDir = swarmSetup.dataDir,\n          ensApi = swarmSetup.ensApi,\n          privateKey = swarmSetup.privateKey;\n\n\n      var STARTUP_TIMEOUT_SECS = 3;\n      var WAITING_PASSWORD = 0;\n      var STARTING = 1;\n      var LISTENING = 2;\n      var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n      var LISTENING_HOOK = \"Swarm http proxy started\";\n\n      var state = WAITING_PASSWORD;\n\n      var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);\n\n      var handleProcessOutput = function handleProcessOutput(data) {\n        if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n          setTimeout(function () {\n            state = STARTING;\n            swarmProcess.stdin.write(password + '\\n');\n          }, 500);\n        } else if (hasString(LISTENING_HOOK)(data)) {\n          state = LISTENING;\n          clearTimeout(timeout);\n          resolve(swarmProcess);\n        }\n      };\n\n      swarmProcess.stdout.on('data', handleProcessOutput);\n      swarmProcess.stderr.on('data', handleProcessOutput);\n      //swarmProcess.on('close', () => setTimeout(restart, 2000));\n\n      var restart = function restart() {\n        return startProcess(swarmSetup).then(resolve).catch(reject);\n      };\n      var error = function error() {\n        return reject(new Error(\"Couldn't start swarm process.\"));\n      };\n      var timeout = setTimeout(error, 20000);\n    });\n  };\n\n  // Process ~> Promise ()\n  //   Stops the Swarm process.\n  var stopProcess = function stopProcess(process) {\n    return new Promise(function (resolve, reject) {\n      process.stderr.removeAllListeners('data');\n      process.stdout.removeAllListeners('data');\n      process.stdin.removeAllListeners('error');\n      process.removeAllListeners('error');\n      process.removeAllListeners('exit');\n      process.kill('SIGINT');\n\n      var killTimeout = setTimeout(function () {\n        return process.kill('SIGKILL');\n      }, 8000);\n\n      process.once('close', function () {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n    });\n  };\n\n  // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n  //   Receives a Swarm configuration object and a callback function. It then\n  //   checks if a local Swarm node is running. If no local Swarm is found, it\n  //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n  //   starts the Swarm process and calls the callback function with an API\n  //   object using the local node. That callback must return a promise which\n  //   will resolve when it is done using the API, so that this function can\n  //   close the Swarm process properly. Returns a promise that resolves when the\n  //   user is done with the API and the Swarm process is closed.\n  //   TODO: check if Swarm process is already running (improve `isAvailable`)\n  var local = function local(swarmSetup) {\n    return function (useAPI) {\n      return _isAvailable(\"http://localhost:8500\").then(function (isAvailable) {\n        return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {\n          return (swarmSetup.onProgress || function () {})(data.length);\n        }).then(function () {\n          return startProcess(swarmSetup);\n        }).then(function (process) {\n          return useAPI(at(\"http://localhost:8500\")).then(function () {\n            return process;\n          });\n        }).then(stopProcess);\n      });\n    };\n  };\n\n  // String ~> Promise Bool\n  //   Returns true if Swarm is available on `url`.\n  //   Perfoms a test upload to determine that.\n  //   TODO: improve this?\n  var _isAvailable = function _isAvailable(swarmUrl) {\n    var testFile = \"test\";\n    var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n    return uploadData(swarmUrl)(testFile).then(function (hash) {\n      return hash === testHash;\n    }).catch(function () {\n      return false;\n    });\n  };\n\n  // String -> String ~> Promise Bool\n  //   Returns a Promise which is true if that Swarm address is a directory.\n  //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n  //   TODO: improve this?\n  var isDirectory = function isDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadData(swarmUrl)(hash).then(function (data) {\n        try {\n          return !!JSON.parse(toString(data)).entries;\n        } catch (e) {\n          return false;\n        }\n      });\n    };\n  };\n\n  // Uncurries a function; used to allow the f(x,y,z) style on exports.\n  var uncurry = function uncurry(f) {\n    return function (a, b, c, d, e) {\n      var p;\n      // Hardcoded because efficiency (`arguments` is very slow).\n      if (typeof a !== \"undefined\") p = f(a);\n      if (typeof b !== \"undefined\") p = f(b);\n      if (typeof c !== \"undefined\") p = f(c);\n      if (typeof d !== \"undefined\") p = f(d);\n      if (typeof e !== \"undefined\") p = f(e);\n      return p;\n    };\n  };\n\n  // () -> Promise Bool\n  //   Not sure how to mock Swarm to test it properly. Ideas?\n  var test = function test() {\n    return Promise.resolve(true);\n  };\n\n  // Uint8Array -> String\n  var toString = function toString(uint8Array) {\n    return bytes.toString(bytes.fromUint8Array(uint8Array));\n  };\n\n  // String -> Uint8Array\n  var fromString = function fromString(string) {\n    return bytes.toUint8Array(bytes.fromString(string));\n  };\n\n  // String -> SwarmAPI\n  //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n  var at = function at(swarmUrl) {\n    return {\n      download: function download(hash, path) {\n        return _download(swarmUrl)(hash)(path);\n      },\n      downloadData: uncurry(downloadData(swarmUrl)),\n      downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n      downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n      downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n      downloadEntries: uncurry(downloadEntries(swarmUrl)),\n      downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n      isAvailable: function isAvailable() {\n        return _isAvailable(swarmUrl);\n      },\n      upload: function upload(arg) {\n        return _upload(swarmUrl)(arg);\n      },\n      uploadData: uncurry(uploadData(swarmUrl)),\n      uploadFile: uncurry(uploadFile(swarmUrl)),\n      uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n      uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n      uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n      uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n      uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n      pick: pick,\n      hash: hash,\n      fromString: fromString,\n      toString: toString\n    };\n  };\n\n  return {\n    at: at,\n    local: local,\n    download: _download,\n    downloadBinary: downloadBinary,\n    downloadData: downloadData,\n    downloadDataToDisk: downloadDataToDisk,\n    downloadDirectory: downloadDirectory,\n    downloadDirectoryToDisk: downloadDirectoryToDisk,\n    downloadEntries: downloadEntries,\n    downloadRoutes: downloadRoutes,\n    isAvailable: _isAvailable,\n    startProcess: startProcess,\n    stopProcess: stopProcess,\n    upload: _upload,\n    uploadData: uploadData,\n    uploadDataFromDisk: uploadDataFromDisk,\n    uploadFile: uploadFile,\n    uploadFileFromDisk: uploadFileFromDisk,\n    uploadDirectory: uploadDirectory,\n    uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n    uploadToManifest: uploadToManifest,\n    pick: pick,\n    hash: hash,\n    fromString: fromString,\n    toString: toString\n  };\n};\n"]},"metadata":{},"sourceType":"script"}