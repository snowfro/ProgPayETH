{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\nimport Web3 from 'web3'; //const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null,\n      cAddress: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const address = this.props.match.params.address;\n    let isETHAddress = drizzle.web3.utils.isAddress(address) ? address : false; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState,\n          cAddress: isETHAddress\n        });\n      }\n    });\n\n    if (isETHAddress) {\n      var contractConfig = {\n        contractName: \"DynamicProgPayETH\",\n        web3Contract: new drizzle.web3.eth.Contract(abi, isETHAddress)\n      }; //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n\n      drizzle.addContract(contractConfig);\n    }\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","Web3","App","state","loading","drizzleState","cAddress","componentDidMount","drizzle","props","address","match","params","isETHAddress","web3","utils","isAddress","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","contractConfig","contractName","web3Contract","eth","Contract","addContract","compomentWillUnmount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AAIA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,QAAQ,EAAC;AAA9C,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,OAAO,GAAG,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBF,OAAxC;AAEA,QAAIG,YAAY,GAAGL,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBC,SAAnB,CAA6BN,OAA7B,IAAsCA,OAAtC,GAA8C,KAAjE,CAJkB,CAUlB;;AACA,SAAKO,WAAL,GAAmBT,OAAO,CAACU,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMd,YAAY,GAAGG,OAAO,CAACU,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIf,YAAY,CAACgB,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEnB,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,YAAlB;AAAiCC,UAAAA,QAAQ,EAACO;AAA1C,SAAd;AACD;AACF,KATkB,CAAnB;;AAWA,QAAIA,YAAJ,EAAiB;AACjB,UAAIW,cAAc,GAAG;AACnBC,QAAAA,YAAY,EAAE,mBADK;AAEnBC,QAAAA,YAAY,EAAE,IAAIlB,OAAO,CAACM,IAAR,CAAaa,GAAb,CAAiBC,QAArB,CAA8B5B,GAA9B,EAAkCa,YAAlC;AAFK,OAArB,CADiB,CAKjB;;AACAL,MAAAA,OAAO,CAACqB,WAAR,CAAoBL,cAApB;AACC;AACA;;AAEHM,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,WAAL;AACD;;AAIDc,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWD,OAAvB;AACA,QAAI,KAAKL,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,QAAI,CAAC,KAAKD,KAAL,CAAWG,QAAhB,EAA0B,OAAO,wBAAP;AAC1B,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AAtDyB;;AAuD3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\nimport Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const address = this.props.match.params.address;\n\n    let isETHAddress = drizzle.web3.utils.isAddress(address)?address:false;\n\n\n\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState , cAddress:isETHAddress});\n      }\n    });\n\n    if (isETHAddress){\n    var contractConfig = {\n      contractName: \"DynamicProgPayETH\",\n      web3Contract: new drizzle.web3.eth.Contract(abi,isETHAddress)\n    }\n    //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n    drizzle.addContract(contractConfig);\n    }\n    }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    console.log(this.props.drizzle);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Not a valid address...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}