{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    console.log(this.props);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return /*#__PURE__*/React.createElement(GetContractInfo, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","abi","App","state","loading","drizzleState","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","compomentWillUnmount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AAIA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE;AAA/B,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB,CADkB,CAGlB;;AACA,SAAKC,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMN,YAAY,GAAGE,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIP,YAAY,CAACQ,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KATkB,CAAnB;AAYD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,WAAL;AACD;;AAIDQ,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAjB;AACA,QAAI,KAAKL,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,wBAGI,oBAAC,eAAD;AACA,MAAA,OAAO,EAAE,KAAKI,KAAL,CAAWD,OADpB;AAEA,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AASD;;AAvCyB;;AAwC3B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\nimport abi from './abi.js';\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n\n\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    console.log(this.props);\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return(\n\n\n        <GetContractInfo\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n        />\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}