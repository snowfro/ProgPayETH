{"ast":null,"code":"import _classCallCheck from\"/Users/erick/eth/progpay/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/erick/eth/progpay/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/erick/eth/progpay/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/erick/eth/progpay/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import GetContractInfo from'./GetContractInfo';//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={loading:true,drizzleState:null,cAddress:null,contractAdded:false};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var drizzle=this.props.drizzle;setTimeout(function(){var web3=drizzle.web3;var address=_this2.props.match.params.address;//console.log(web3);\nvar isETHAddress=web3.utils.isAddress(address)?address:false;console.log(isETHAddress);if(isETHAddress){var contractConfig={contractName:\"DynamicProgPayETH\",web3Contract:new web3.eth.Contract(_this2.props.options.contracts[0].abi,isETHAddress)};//drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\ndrizzle.addContract(contractConfig);}_this2.setState({cAddress:isETHAddress});_this2.checkIfProgPayETHContract();},500);// subscribe to changes in the store\nthis.unsubscribe=drizzle.store.subscribe(function(){// every time the store updates, grab the state from drizzle\nvar drizzleState=drizzle.store.getState();// check to see if it's ready, if so, update local component state\nif(drizzleState.drizzleStatus.initialized){_this2.setState({loading:false,drizzleState:drizzleState});}});}},{key:\"checkIfProgPayETHContract\",value:function checkIfProgPayETHContract(){var drizzle=this.props.drizzle;var contractNameIndex=drizzle.contracts.DynamicProgPayETH.methods['contractName'].cacheCall();this.setState({contractNameIndex:contractNameIndex});}},{key:\"compomentWillUnmount\",value:function compomentWillUnmount(){this.unsubscribe();}},{key:\"render\",value:function render(){//this.addContract();\nvar dS=this.state.drizzleState;var d=this.props.drizzle;var contractName;console.log(d);if(dS&&dS.contracts.DynamicProgPayETH){console.log(\"DrizzleState\");console.log(dS);contractName=dS.contracts.DynamicProgPayETH.contractName[this.state.contractNameIndex];}//let contractName;\n//if (this.state.drizzleState.contracts.DynamicProgPayETH){\n//console.log('kie');\n//  }\n//console.log(contractName && \"test\"+contractName.value);\nif(this.state.loading)return\"Loading Drizzle...\";if(!this.state.cAddress)return\"Loading Drizzle...\";//if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is NOT a valid contract.\";\n//if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is not a compatible contract.\";\nreturn/*#__PURE__*/React.createElement(\"div\",null,contractName&&contractName.value===\"Progress Payments ETH\"&&/*#__PURE__*/React.createElement(GetContractInfo,{drizzle:this.props.drizzle,drizzleState:this.state.drizzleState}),contractName&&contractName.value!==\"Progress Payments ETH\"&&/*#__PURE__*/React.createElement(\"p\",null,\"This is not a supported contract.\"));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","GetContractInfo","App","state","loading","drizzleState","cAddress","contractAdded","drizzle","props","setTimeout","web3","address","match","params","isETHAddress","utils","isAddress","console","log","contractConfig","contractName","web3Contract","eth","Contract","options","contracts","abi","addContract","setState","checkIfProgPayETHContract","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","contractNameIndex","DynamicProgPayETH","methods","cacheCall","dS","d","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GetContractInfo from './GetContractInfo';\n\n\n//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, cAddress:null, contractAdded:false };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    setTimeout(() => {\n      const { web3 } = drizzle;\n      const address = this.props.match.params.address;\n      //console.log(web3);\n\n      let isETHAddress = web3.utils.isAddress(address)?address:false;\n      console.log(isETHAddress);\n      if (isETHAddress){\n      var contractConfig = {\n        contractName: \"DynamicProgPayETH\",\n        web3Contract: new web3.eth.Contract(this.props.options.contracts[0].abi,isETHAddress)\n      }\n      //drizzle.store.dispatch({type: 'ADD_CONTRACT', contractConfig});\n      drizzle.addContract(contractConfig);\n      }\n\n      this.setState({ cAddress:isETHAddress});\n\n      this.checkIfProgPayETHContract();\n\n    }, 500)\n\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n\n    }\n\n\n    checkIfProgPayETHContract(){\n\n    const {drizzle} = this.props;\n    const contractNameIndex = drizzle.contracts.DynamicProgPayETH.methods['contractName'].cacheCall();\n    this.setState({contractNameIndex});\n    }\n\n\n\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n\n\n  render() {\n    //this.addContract();\n    let dS = this.state.drizzleState;\n    let d = this.props.drizzle;\n    let contractName;\n    console.log(d);\n    if (dS && dS.contracts.DynamicProgPayETH){\n    console.log(\"DrizzleState\");\n    console.log(dS);\n    contractName = dS.contracts.DynamicProgPayETH.contractName[this.state.contractNameIndex];\n   }\n    //let contractName;\n    //if (this.state.drizzleState.contracts.DynamicProgPayETH){\n    //console.log('kie');\n  //  }\n    //console.log(contractName && \"test\"+contractName.value);\n\n\n\n    if (this.state.loading) return \"Loading Drizzle...\";\n    if (!this.state.cAddress) return \"Loading Drizzle...\";\n    //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is NOT a valid contract.\";\n    //if (contractName && contractName.value!=\"Progress Payments ETH\") return \"This is not a compatible contract.\";\n\n\n    return(\n            <div>\n      {contractName && contractName.value===\"Progress Payments ETH\" &&\n\n      <GetContractInfo\n      drizzle={this.props.drizzle}\n      drizzleState={this.state.drizzleState}\n      />\n\n    }\n      {contractName && contractName.value !==\"Progress Payments ETH\" &&\n      <p>This is not a supported contract.</p>\n    }\n      </div>\n\n      )\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}