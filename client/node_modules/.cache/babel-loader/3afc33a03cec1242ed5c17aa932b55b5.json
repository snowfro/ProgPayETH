{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    }, \"Drizzle is ready\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/App.js"],"names":["React","Component","App","state","loading","drizzleState","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","compomentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE;AAA/B,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB,CADkB,CACa;;AAC/B,SAAKC,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAAC;AAChD,YAAMN,YAAY,GAAGE,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAD+C,CACD;;AAC9C,UAAIP,YAAY,CAACQ,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KALkB,CAAnB;AAMD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,WAAL;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKd,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,wBAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AApByB;;AAqB3B,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;// subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {// every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();// check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return <div className=\"App\">Drizzle is ready</div>;\n  }\n}export default App;\n"]},"metadata":{},"sourceType":"module"}