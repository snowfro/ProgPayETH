{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar core = require('web3-core');\n\nvar helpers = require('web3-core-helpers');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar Method = require('web3-core-method');\n\nvar utils = require('web3-utils');\n\nvar Net = require('web3-net');\n\nvar Personal = require('web3-eth-personal');\n\nvar BaseContract = require('web3-eth-contract');\n\nvar Iban = require('web3-eth-iban');\n\nvar Accounts = require('web3-eth-accounts');\n\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\n\nvar formatter = helpers.formatters;\n\nvar blockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nvar Eth = function Eth() {\n  var _this = this; // sets _requestmanager\n\n\n  core.packageInit(this, arguments); // overwrite setProvider\n\n  var setProvider = this.setProvider;\n\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n\n    _this.net.setProvider.apply(_this, arguments);\n\n    _this.personal.setProvider.apply(_this, arguments);\n\n    _this.accounts.setProvider.apply(_this, arguments);\n\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function () {\n      return defaultAccount;\n    },\n    set: function (val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      } // also set on the Contract object\n\n\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function () {\n      return defaultBlock;\n    },\n    set: function (val) {\n      defaultBlock = val; // also set on the Contract object\n\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions; // add net\n\n  this.net = new Net(this.currentProvider); // add chain detection\n\n  this.net.getNetworkType = getNetworkType.bind(this); // add accounts\n\n  this.accounts = new Accounts(this.currentProvider); // add personal\n\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount; // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n\n  var self = this;\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments); // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n\n    var _this = this;\n\n    var setProvider = self.setProvider;\n\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self.currentProvider]);\n    };\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  }; // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract; // add contract\n\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.setProvider(this.currentProvider, this.accounts); // add IBAN\n\n  this.Iban = Iban; // add ABI\n\n  this.abi = abi;\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function (payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getCompilers',\n    call: 'eth_getCompilers',\n    params: 0\n  }), new Method({\n    name: 'compile.solidity',\n    call: 'eth_compileSolidity',\n    params: 1\n  }), new Method({\n    name: 'compile.lll',\n    call: 'eth_compileLLL',\n    params: 1\n  }), new Method({\n    name: 'compile.serpent',\n    call: 'eth_compileSerpent',\n    params: 1\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }), // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function (output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n\n          if (_.isFunction(this.callback)) {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function (output) {\n          var _this = this; // fire TRUE at start\n\n\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n\n            setTimeout(function () {\n              _this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0); // fire sync status\n          } else {\n            this.emit('data', output);\n\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            } // wait for some time before fireing the FALSE\n\n\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n\n                _this.emit('changed', _this._isSyncing);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n  });\n};\n\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/node_modules/drizzle/node_modules/web3-eth/src/index.js"],"names":["_","require","core","helpers","Subscriptions","subscriptions","Method","utils","Net","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","isString","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setProvider","apply","net","personal","accounts","Contract","currentProvider","defaultAccount","defaultBlock","Object","defineProperty","get","set","val","toChecksumAddress","inputAddressFormatter","methods","forEach","method","enumerable","clearSubscriptions","_requestManager","bind","self","prototype","create","constructor","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","isFunction","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","addProviders","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;AAMA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCI,aAAvD;;AACA,IAAIC,MAAM,GAAGL,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIO,GAAG,GAAGP,OAAO,CAAC,UAAD,CAAjB;;AAEA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,mBAAD,CAAtB;;AACA,IAAIS,YAAY,GAAGT,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAIU,IAAI,GAAGV,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIW,QAAQ,GAAGX,OAAO,CAAC,mBAAD,CAAtB;;AACA,IAAIY,GAAG,GAAGZ,OAAO,CAAC,cAAD,CAAjB;;AAEA,IAAIa,cAAc,GAAGb,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIc,SAAS,GAAGZ,OAAO,CAACa,UAAxB;;AAGA,IAAIC,SAAS,GAAG,UAAUC,IAAV,EAAgB;AAC5B,SAAQlB,CAAC,CAACmB,QAAF,CAAWD,IAAI,CAAC,CAAD,CAAf,KAAuBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,IAAhB,MAA0B,CAAlD,GAAuD,oBAAvD,GAA8E,sBAArF;AACH,CAFD;;AAIA,IAAIC,wBAAwB,GAAG,UAAUH,IAAV,EAAgB;AAC3C,SAAQlB,CAAC,CAACmB,QAAF,CAAWD,IAAI,CAAC,CAAD,CAAf,KAAuBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,IAAhB,MAA0B,CAAlD,GAAuD,uCAAvD,GAAiG,yCAAxG;AACH,CAFD;;AAIA,IAAIE,SAAS,GAAG,UAAUJ,IAAV,EAAgB;AAC5B,SAAQlB,CAAC,CAACmB,QAAF,CAAWD,IAAI,CAAC,CAAD,CAAf,KAAuBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,IAAhB,MAA0B,CAAlD,GAAuD,iCAAvD,GAA2F,mCAAlG;AACH,CAFD;;AAIA,IAAIG,4BAA4B,GAAG,UAAUL,IAAV,EAAgB;AAC/C,SAAQlB,CAAC,CAACmB,QAAF,CAAWD,IAAI,CAAC,CAAD,CAAf,KAAuBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,IAAhB,MAA0B,CAAlD,GAAuD,oCAAvD,GAA8F,sCAArG;AACH,CAFD;;AAIA,IAAII,cAAc,GAAG,UAAUN,IAAV,EAAgB;AACjC,SAAQlB,CAAC,CAACmB,QAAF,CAAWD,IAAI,CAAC,CAAD,CAAf,KAAuBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,IAAhB,MAA0B,CAAlD,GAAuD,8BAAvD,GAAwF,gCAA/F;AACH,CAFD;;AAKA,IAAIK,GAAG,GAAG,SAASA,GAAT,GAAe;AACrB,MAAIC,KAAK,GAAG,IAAZ,CADqB,CAGrB;;;AACAxB,EAAAA,IAAI,CAACyB,WAAL,CAAiB,IAAjB,EAAuBC,SAAvB,EAJqB,CAMrB;;AACA,MAAIC,WAAW,GAAG,KAAKA,WAAvB;;AACA,OAAKA,WAAL,GAAmB,YAAY;AAC3BA,IAAAA,WAAW,CAACC,KAAZ,CAAkBJ,KAAlB,EAAyBE,SAAzB;;AACAF,IAAAA,KAAK,CAACK,GAAN,CAAUF,WAAV,CAAsBC,KAAtB,CAA4BJ,KAA5B,EAAmCE,SAAnC;;AACAF,IAAAA,KAAK,CAACM,QAAN,CAAeH,WAAf,CAA2BC,KAA3B,CAAiCJ,KAAjC,EAAwCE,SAAxC;;AACAF,IAAAA,KAAK,CAACO,QAAN,CAAeJ,WAAf,CAA2BC,KAA3B,CAAiCJ,KAAjC,EAAwCE,SAAxC;;AACAF,IAAAA,KAAK,CAACQ,QAAN,CAAeL,WAAf,CAA2BH,KAAK,CAACS,eAAjC,EAAkDT,KAAK,CAACO,QAAxD;AACH,GAND;;AASA,MAAIG,cAAc,GAAG,IAArB;AACA,MAAIC,YAAY,GAAG,QAAnB;AAEAC,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AAC1CC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOJ,cAAP;AACH,KAHyC;AAI1CK,IAAAA,GAAG,EAAE,UAAUC,GAAV,EAAe;AAChB,UAAGA,GAAH,EAAQ;AACJN,QAAAA,cAAc,GAAG7B,KAAK,CAACoC,iBAAN,CAAwB5B,SAAS,CAAC6B,qBAAV,CAAgCF,GAAhC,CAAxB,CAAjB;AACH,OAHe,CAKhB;;;AACAhB,MAAAA,KAAK,CAACQ,QAAN,CAAeE,cAAf,GAAgCA,cAAhC;AACAV,MAAAA,KAAK,CAACM,QAAN,CAAeI,cAAf,GAAgCA,cAAhC,CAPgB,CAShB;;AACAS,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAC7BA,QAAAA,MAAM,CAACX,cAAP,GAAwBA,cAAxB;AACH,OAFD;AAIA,aAAOM,GAAP;AACH,KAnByC;AAoB1CM,IAAAA,UAAU,EAAE;AApB8B,GAA9C;AAsBAV,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EAA4C;AACxCC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOH,YAAP;AACH,KAHuC;AAIxCI,IAAAA,GAAG,EAAE,UAAUC,GAAV,EAAe;AAChBL,MAAAA,YAAY,GAAGK,GAAf,CADgB,CAEhB;;AACAhB,MAAAA,KAAK,CAACQ,QAAN,CAAeG,YAAf,GAA8BA,YAA9B;AACAX,MAAAA,KAAK,CAACM,QAAN,CAAeK,YAAf,GAA8BA,YAA9B,CAJgB,CAMhB;;AACAQ,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAC7BA,QAAAA,MAAM,CAACV,YAAP,GAAsBA,YAAtB;AACH,OAFD;AAIA,aAAOK,GAAP;AACH,KAhBuC;AAiBxCM,IAAAA,UAAU,EAAE;AAjB4B,GAA5C;AAqBA,OAAKC,kBAAL,GAA0BvB,KAAK,CAACwB,eAAN,CAAsBD,kBAAhD,CA/DqB,CAiErB;;AACA,OAAKlB,GAAL,GAAW,IAAIvB,GAAJ,CAAQ,KAAK2B,eAAb,CAAX,CAlEqB,CAmErB;;AACA,OAAKJ,GAAL,CAASjB,cAAT,GAA0BA,cAAc,CAACqC,IAAf,CAAoB,IAApB,CAA1B,CApEqB,CAsErB;;AACA,OAAKlB,QAAL,GAAgB,IAAIrB,QAAJ,CAAa,KAAKuB,eAAlB,CAAhB,CAvEqB,CAyErB;;AACA,OAAKH,QAAL,GAAgB,IAAIvB,QAAJ,CAAa,KAAK0B,eAAlB,CAAhB;AACA,OAAKH,QAAL,CAAcI,cAAd,GAA+B,KAAKA,cAApC,CA3EqB,CA6ErB;AACA;AACA;AACA;AACA;;AACA,MAAIgB,IAAI,GAAG,IAAX;;AACA,MAAIlB,QAAQ,GAAG,SAASA,QAAT,GAAoB;AAC/BxB,IAAAA,YAAY,CAACoB,KAAb,CAAmB,IAAnB,EAAyBF,SAAzB,EAD+B,CAG/B;AACA;AACA;AACA;;AACA,QAAIF,KAAK,GAAG,IAAZ;;AACA,QAAIG,WAAW,GAAGuB,IAAI,CAACvB,WAAvB;;AACAuB,IAAAA,IAAI,CAACvB,WAAL,GAAmB,YAAW;AAC5BA,MAAAA,WAAW,CAACC,KAAZ,CAAkBsB,IAAlB,EAAwBxB,SAAxB;AACA1B,MAAAA,IAAI,CAACyB,WAAL,CAAiBD,KAAjB,EAAwB,CAAC0B,IAAI,CAACjB,eAAN,CAAxB;AACD,KAHD;AAIH,GAbD;;AAeAD,EAAAA,QAAQ,CAACL,WAAT,GAAuB,YAAW;AAC9BnB,IAAAA,YAAY,CAACmB,WAAb,CAAyBC,KAAzB,CAA+B,IAA/B,EAAqCF,SAArC;AACH,GAFD,CAlGqB,CAsGrB;AACA;;;AACAM,EAAAA,QAAQ,CAACmB,SAAT,GAAqBf,MAAM,CAACgB,MAAP,CAAc5C,YAAY,CAAC2C,SAA3B,CAArB;AACAnB,EAAAA,QAAQ,CAACmB,SAAT,CAAmBE,WAAnB,GAAiCrB,QAAjC,CAzGqB,CA2GrB;;AACA,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKA,QAAL,CAAcE,cAAd,GAA+B,KAAKA,cAApC;AACA,OAAKF,QAAL,CAAcG,YAAd,GAA6B,KAAKA,YAAlC;AACA,OAAKH,QAAL,CAAcL,WAAd,CAA0B,KAAKM,eAA/B,EAAgD,KAAKF,QAArD,EA/GqB,CAiHrB;;AACA,OAAKtB,IAAL,GAAYA,IAAZ,CAlHqB,CAoHrB;;AACA,OAAKE,GAAL,GAAWA,GAAX;AAGA,MAAIgC,OAAO,GAAG,CACV,IAAIvC,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE;AAFC,GAAX,CADU,EAKV,IAAInD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,oBADC;AAEPC,IAAAA,IAAI,EAAE,qBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CALU,EAUV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,cAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAVU,EAeV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,UADC;AAEPC,IAAAA,IAAI,EAAE,YAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAfU,EAoBV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,cAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AAJhB,GAAX,CApBU,EA0BV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,WADC;AAEPC,IAAAA,IAAI,EAAE,aAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,eAAe,EAAE5C,SAAS,CAAC8C;AAJpB,GAAX,CA1BU,EAgCV,IAAIvD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,cAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,eAAe,EAAE5C,SAAS,CAAC+C;AAJpB,GAAX,CAhCU,EAsCV,IAAIxD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,cAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,eAAe,EAAEpD,KAAK,CAACoC;AAJhB,GAAX,CAtCU,EA4CV,IAAIrC,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,gBADC;AAEPC,IAAAA,IAAI,EAAE,iBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AAJhB,GAAX,CA5CU,EAkDV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,YADC;AAEPC,IAAAA,IAAI,EAAE,gBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6B,qBAAX,EAAkC7B,SAAS,CAACiD,gCAA5C,CAJT;AAKPL,IAAAA,eAAe,EAAE5C,SAAS,CAAC+C;AALpB,GAAX,CAlDU,EAyDV,IAAIxD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,cADC;AAEPC,IAAAA,IAAI,EAAE,kBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6B,qBAAX,EAAkCrC,KAAK,CAAC0D,WAAxC,EAAqDlD,SAAS,CAACiD,gCAA/D;AAJT,GAAX,CAzDU,EA+DV,IAAI1D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,IAAI,EAAE,aAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6B,qBAAX,EAAkC7B,SAAS,CAACiD,gCAA5C;AAJT,GAAX,CA/DU,EAqEV,IAAI1D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,UADC;AAEPC,IAAAA,IAAI,EAAExC,SAFC;AAGPyC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACmD,yBAAX,EAAsC,UAAUxB,GAAV,EAAe;AAAE,aAAO,CAAC,CAACA,GAAT;AAAe,KAAtE,CAJT;AAKPiB,IAAAA,eAAe,EAAE5C,SAAS,CAACoD;AALpB,GAAX,CArEU,EA4EV,IAAI7D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,UADC;AAEPC,IAAAA,IAAI,EAAEnC,SAFC;AAGPoC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACmD,yBAAX,EAAsC3D,KAAK,CAAC0D,WAA5C,CAJT;AAKPN,IAAAA,eAAe,EAAE5C,SAAS,CAACoD;AALpB,GAAX,CA5EU,EAoFV,IAAI7D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,0BADC;AAEPC,IAAAA,IAAI,EAAElC,4BAFC;AAGPmC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACmD,yBAAX,CAJT;AAKPP,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AALhB,GAAX,CApFU,EA2FV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,oBADC;AAEPC,IAAAA,IAAI,EAAEjC,cAFC;AAGPkC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACmD,yBAAX,CAJT;AAKPP,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AALhB,GAAX,CA3FU,EAkGV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,gBADC;AAEPC,IAAAA,IAAI,EAAE,0BAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAC,IAAD,CAJT;AAKPJ,IAAAA,eAAe,EAAE5C,SAAS,CAACqD;AALpB,GAAX,CAlGU,EAyGV,IAAI9D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,yBADC;AAEPC,IAAAA,IAAI,EAAEpC,wBAFC;AAGPqC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACmD,yBAAX,EAAsC3D,KAAK,CAAC0D,WAA5C,CAJT;AAKPN,IAAAA,eAAe,EAAE5C,SAAS,CAACqD;AALpB,GAAX,CAzGU,EAgHV,IAAI9D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,uBADC;AAEPC,IAAAA,IAAI,EAAE,2BAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAC,IAAD,CAJT;AAKPJ,IAAAA,eAAe,EAAE5C,SAAS,CAACsD;AALpB,GAAX,CAhHU,EAuHV,IAAI/D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,qBADC;AAEPC,IAAAA,IAAI,EAAE,yBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6B,qBAAX,EAAkC7B,SAAS,CAACiD,gCAA5C,CAJT;AAKPL,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AALhB,GAAX,CAvHU,EA8HV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,uBADC;AAEPC,IAAAA,IAAI,EAAE,wBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAC,IAAD;AAJT,GAAX,CA9HU,EAoIV,IAAIzD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,iBADC;AAEPC,IAAAA,IAAI,EAAE,qBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACuD,yBAAX;AAJT,GAAX,CApIU,EA0IV,IAAIhE,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,iBADC;AAEPC,IAAAA,IAAI,EAAE,qBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACuD,yBAAX;AAJT,GAAX,CA1IU,EAgJV,IAAIhE,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,MADC;AAEPC,IAAAA,IAAI,EAAE,UAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAACwD,kBAAX,EAA+BxD,SAAS,CAAC6B,qBAAzC,CAJT;AAKP4B,IAAAA,gBAAgB,EAAE,UAAUC,OAAV,EAAmB;AACjCA,MAAAA,OAAO,CAACf,MAAR,CAAegB,OAAf;AACA,aAAOD,OAAP;AACH;AARM,GAAX,CAhJU,EA0JV,IAAInE,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,MADC;AAEPC,IAAAA,IAAI,EAAE,UAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC4D,kBAAX,EAA+B5D,SAAS,CAACiD,gCAAzC;AAJT,GAAX,CA1JU,EAgKV,IAAI1D,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,iBAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC4D,kBAAX,CAJT;AAKPhB,IAAAA,eAAe,EAAEpD,KAAK,CAACqD;AALhB,GAAX,CAhKU,EAuKV,IAAItD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,cADC;AAEPC,IAAAA,IAAI,EAAE,kBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAvKU,EA4KV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,kBADC;AAEPC,IAAAA,IAAI,EAAE,qBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CA5KU,EAiLV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,gBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAjLU,EAsLV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,iBADC;AAEPC,IAAAA,IAAI,EAAE,oBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAtLU,EA2LV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,YADC;AAEPC,IAAAA,IAAI,EAAE,gBAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CA3LU,EAgMV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,IAAI,EAAE,aAFC;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAX,CAhMU,EAqMV,IAAIpD,MAAJ,CAAW;AACPkD,IAAAA,IAAI,EAAE,aADC;AAEPC,IAAAA,IAAI,EAAE,aAFC;AAGPC,IAAAA,MAAM,EAAE,CAHD;AAIPK,IAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6D,iBAAX,CAJT;AAKPjB,IAAAA,eAAe,EAAE5C,SAAS,CAAC8D;AALpB,GAAX,CArMU,EA6MV;AACA,MAAIzE,aAAJ,CAAkB;AACdoD,IAAAA,IAAI,EAAE,WADQ;AAEdsB,IAAAA,IAAI,EAAE,KAFQ;AAGdzE,IAAAA,aAAa,EAAE;AACX,yBAAmB;AACf;AACA0E,QAAAA,gBAAgB,EAAE,UAFH;AAEe;AAC9BrB,QAAAA,MAAM,EAAE,CAHO;AAIfC,QAAAA,eAAe,EAAE5C,SAAS,CAACoD;AAJZ,OADR;AAOX,6BAAuB;AACnBY,QAAAA,gBAAgB,EAAE,wBADC;AACyB;AAC5CrB,QAAAA,MAAM,EAAE;AAFW,OAPZ;AAWX,cAAQ;AACJA,QAAAA,MAAM,EAAE,CADJ;AAEJK,QAAAA,cAAc,EAAE,CAAChD,SAAS,CAAC6D,iBAAX,CAFZ;AAGJjB,QAAAA,eAAe,EAAE5C,SAAS,CAAC8D,kBAHvB;AAIJ;AACAG,QAAAA,mBAAmB,EAAE,UAAUC,MAAV,EAAkB;AACnC,cAAGA,MAAM,CAACC,OAAV,EAAmB;AACf,iBAAKC,IAAL,CAAU,SAAV,EAAqBF,MAArB;AACH,WAFD,MAEO;AACH,iBAAKE,IAAL,CAAU,MAAV,EAAkBF,MAAlB;AACH;;AAED,cAAIjF,CAAC,CAACoF,UAAF,CAAa,KAAKC,QAAlB,CAAJ,EAAiC;AAC7B,iBAAKA,QAAL,CAAc,IAAd,EAAoBJ,MAApB,EAA4B,IAA5B;AACH;AACJ;AAfG,OAXG;AA4BX,iBAAW;AACPvB,QAAAA,MAAM,EAAE,CADD;AAEPC,QAAAA,eAAe,EAAE5C,SAAS,CAAC8C,sBAFpB;AAGPmB,QAAAA,mBAAmB,EAAE,UAAUC,MAAV,EAAkB;AACnC,cAAIvD,KAAK,GAAG,IAAZ,CADmC,CAGnC;;;AACA,cAAG,KAAK4D,UAAL,KAAoB,IAAvB,EAA6B;AACzB,iBAAKA,UAAL,GAAkB,IAAlB;AACA,iBAAKH,IAAL,CAAU,SAAV,EAAqBzD,KAAK,CAAC4D,UAA3B;;AAEA,gBAAItF,CAAC,CAACoF,UAAF,CAAa,KAAKC,QAAlB,CAAJ,EAAiC;AAC7B,mBAAKA,QAAL,CAAc,IAAd,EAAoB3D,KAAK,CAAC4D,UAA1B,EAAsC,IAAtC;AACH;;AAEDC,YAAAA,UAAU,CAAC,YAAY;AACnB7D,cAAAA,KAAK,CAACyD,IAAN,CAAW,MAAX,EAAmBF,MAAnB;;AAEA,kBAAIjF,CAAC,CAACoF,UAAF,CAAa1D,KAAK,CAAC2D,QAAnB,CAAJ,EAAkC;AAC9B3D,gBAAAA,KAAK,CAAC2D,QAAN,CAAe,IAAf,EAAqBJ,MAArB,EAA6BvD,KAA7B;AACH;AACJ,aANS,EAMP,CANO,CAAV,CARyB,CAgBzB;AACH,WAjBD,MAiBO;AACH,iBAAKyD,IAAL,CAAU,MAAV,EAAkBF,MAAlB;;AACA,gBAAIjF,CAAC,CAACoF,UAAF,CAAa1D,KAAK,CAAC2D,QAAnB,CAAJ,EAAkC;AAC9B,mBAAKA,QAAL,CAAc,IAAd,EAAoBJ,MAApB,EAA4B,IAA5B;AACH,aAJE,CAMH;;;AACAO,YAAAA,YAAY,CAAC,KAAKC,iBAAN,CAAZ;AACA,iBAAKA,iBAAL,GAAyBF,UAAU,CAAC,YAAY;AAC5C,kBAAGN,MAAM,CAACS,YAAP,GAAsBT,MAAM,CAACU,YAAP,GAAsB,GAA/C,EAAoD;AAChDjE,gBAAAA,KAAK,CAAC4D,UAAN,GAAmB,KAAnB;;AACA5D,gBAAAA,KAAK,CAACyD,IAAN,CAAW,SAAX,EAAsBzD,KAAK,CAAC4D,UAA5B;;AAEA,oBAAItF,CAAC,CAACoF,UAAF,CAAa1D,KAAK,CAAC2D,QAAnB,CAAJ,EAAkC;AAC9B3D,kBAAAA,KAAK,CAAC2D,QAAN,CAAe,IAAf,EAAqB3D,KAAK,CAAC4D,UAA3B,EAAuC5D,KAAvC;AACH;AACJ;AACJ,aATkC,EAShC,GATgC,CAAnC;AAUH;AACJ;AA3CM;AA5BA;AAHD,GAAlB,CA9MU,CAAd;AA8RAmB,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAC7BA,IAAAA,MAAM,CAAC6C,cAAP,CAAsBlE,KAAtB;AACAqB,IAAAA,MAAM,CAAC8C,iBAAP,CAAyBnE,KAAK,CAACwB,eAA/B,EAAgDxB,KAAK,CAACO,QAAtD,EAF6B,CAEoC;;AACjEc,IAAAA,MAAM,CAACV,YAAP,GAAsBX,KAAK,CAACW,YAA5B;AACAU,IAAAA,MAAM,CAACX,cAAP,GAAwBV,KAAK,CAACU,cAA9B;AACH,GALD;AAOH,CA7ZD;;AA+ZAlC,IAAI,CAAC4F,YAAL,CAAkBrE,GAAlB;AAGAsE,MAAM,CAACC,OAAP,GAAiBvE,GAAjB","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n          setProvider.apply(self, arguments);\n          core.packageInit(_this, [self.currentProvider]);\n        };\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getCompilers',\n            call: 'eth_getCompilers',\n            params: 0\n        }),\n        new Method({\n            name: 'compile.solidity',\n            call: 'eth_compileSolidity',\n            params: 1\n        }),\n        new Method({\n            name: 'compile.lll',\n            call: 'eth_compileLLL',\n            params: 1\n        }),\n        new Method({\n            name: 'compile.serpent',\n            call: 'eth_compileSerpent',\n            params: 1\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n"]},"metadata":{},"sourceType":"script"}