{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file param.js\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\nvar formatters = require('./formatters.js');\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\n\n\nvar SolidityParam = function (value, offset, rawValue) {\n  this.value = value || '';\n  this.offset = offset; // offset in bytes\n\n  this.rawValue = rawValue; // used for debugging\n};\n/**\n * This method should be used to get length of params's dynamic part\n *\n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\n\n\nSolidityParam.prototype.dynamicPartLength = function () {\n  return this.dynamicPart().length / 2;\n};\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\n\n\nSolidityParam.prototype.withOffset = function (offset) {\n  return new SolidityParam(this.value, offset);\n};\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\n\n\nSolidityParam.prototype.combine = function (param) {\n  return new SolidityParam(this.value + param.value);\n};\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\n\n\nSolidityParam.prototype.isDynamic = function () {\n  return this.offset !== undefined;\n};\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\n\n\nSolidityParam.prototype.offsetAsBytes = function () {\n  return !this.isDynamic() ? '' : formatters.toTwosComplement(this.offset).replace('0x', '');\n};\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\n\n\nSolidityParam.prototype.staticPart = function () {\n  if (!this.isDynamic()) {\n    return this.value;\n  }\n\n  return this.offsetAsBytes();\n};\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\n\n\nSolidityParam.prototype.dynamicPart = function () {\n  return this.isDynamic() ? this.value : '';\n};\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\n\n\nSolidityParam.prototype.encode = function () {\n  return this.staticPart() + this.dynamicPart();\n};\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\n\n\nSolidityParam.encodeList = function (params) {\n  // updating offsets\n  var totalOffset = params.length * 32;\n  var offsetParams = params.map(function (param) {\n    if (!param.isDynamic()) {\n      return param;\n    }\n\n    var offset = totalOffset;\n    totalOffset += param.dynamicPartLength();\n    return param.withOffset(offset);\n  }); // encode everything!\n\n  return offsetParams.reduce(function (result, param) {\n    return result + param.dynamicPart();\n  }, offsetParams.reduce(function (result, param) {\n    return result + param.staticPart();\n  }, ''));\n};\n\nmodule.exports = SolidityParam;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/node_modules/drizzle/node_modules/web3-eth-abi/src/param.js"],"names":["formatters","require","SolidityParam","value","offset","rawValue","prototype","dynamicPartLength","dynamicPart","length","withOffset","combine","param","isDynamic","undefined","offsetAsBytes","toTwosComplement","replace","staticPart","encode","encodeList","params","totalOffset","offsetParams","map","reduce","result","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;AAEA;;;;;;AAIA,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;AACnD,OAAKF,KAAL,GAAaA,KAAK,IAAI,EAAtB;AACA,OAAKC,MAAL,GAAcA,MAAd,CAFmD,CAE7B;;AACtB,OAAKC,QAAL,GAAgBA,QAAhB,CAHmD,CAGzB;AAC7B,CAJD;AAMA;;;;;;;;AAMAH,aAAa,CAACI,SAAd,CAAwBC,iBAAxB,GAA4C,YAAY;AACpD,SAAO,KAAKC,WAAL,GAAmBC,MAAnB,GAA4B,CAAnC;AACH,CAFD;AAIA;;;;;;;;;AAOAP,aAAa,CAACI,SAAd,CAAwBI,UAAxB,GAAqC,UAAUN,MAAV,EAAkB;AACnD,SAAO,IAAIF,aAAJ,CAAkB,KAAKC,KAAvB,EAA8BC,MAA9B,CAAP;AACH,CAFD;AAIA;;;;;;;;;;AAQAF,aAAa,CAACI,SAAd,CAAwBK,OAAxB,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,SAAO,IAAIV,aAAJ,CAAkB,KAAKC,KAAL,GAAaS,KAAK,CAACT,KAArC,CAAP;AACH,CAFD;AAIA;;;;;;;;;AAOAD,aAAa,CAACI,SAAd,CAAwBO,SAAxB,GAAoC,YAAY;AAC5C,SAAO,KAAKT,MAAL,KAAgBU,SAAvB;AACH,CAFD;AAIA;;;;;;;;AAMAZ,aAAa,CAACI,SAAd,CAAwBS,aAAxB,GAAwC,YAAY;AAChD,SAAO,CAAC,KAAKF,SAAL,EAAD,GAAoB,EAApB,GAAyBb,UAAU,CAACgB,gBAAX,CAA4B,KAAKZ,MAAjC,EAAyCa,OAAzC,CAAiD,IAAjD,EAAsD,EAAtD,CAAhC;AACH,CAFD;AAIA;;;;;;;;AAMAf,aAAa,CAACI,SAAd,CAAwBY,UAAxB,GAAqC,YAAY;AAC7C,MAAI,CAAC,KAAKL,SAAL,EAAL,EAAuB;AACnB,WAAO,KAAKV,KAAZ;AACH;;AACD,SAAO,KAAKY,aAAL,EAAP;AACH,CALD;AAOA;;;;;;;;AAMAb,aAAa,CAACI,SAAd,CAAwBE,WAAxB,GAAsC,YAAY;AAC9C,SAAO,KAAKK,SAAL,KAAmB,KAAKV,KAAxB,GAAgC,EAAvC;AACH,CAFD;AAIA;;;;;;;;AAMAD,aAAa,CAACI,SAAd,CAAwBa,MAAxB,GAAiC,YAAY;AACzC,SAAO,KAAKD,UAAL,KAAoB,KAAKV,WAAL,EAA3B;AACH,CAFD;AAIA;;;;;;;;;AAOAN,aAAa,CAACkB,UAAd,GAA2B,UAAUC,MAAV,EAAkB;AAEzC;AACA,MAAIC,WAAW,GAAGD,MAAM,CAACZ,MAAP,GAAgB,EAAlC;AACA,MAAIc,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,UAAUZ,KAAV,EAAiB;AAC3C,QAAI,CAACA,KAAK,CAACC,SAAN,EAAL,EAAwB;AACpB,aAAOD,KAAP;AACH;;AACD,QAAIR,MAAM,GAAGkB,WAAb;AACAA,IAAAA,WAAW,IAAIV,KAAK,CAACL,iBAAN,EAAf;AACA,WAAOK,KAAK,CAACF,UAAN,CAAiBN,MAAjB,CAAP;AACH,GAPkB,CAAnB,CAJyC,CAazC;;AACA,SAAOmB,YAAY,CAACE,MAAb,CAAoB,UAAUC,MAAV,EAAkBd,KAAlB,EAAyB;AAChD,WAAOc,MAAM,GAAGd,KAAK,CAACJ,WAAN,EAAhB;AACH,GAFM,EAEJe,YAAY,CAACE,MAAb,CAAoB,UAAUC,MAAV,EAAkBd,KAAlB,EAAyB;AAC5C,WAAOc,MAAM,GAAGd,KAAK,CAACM,UAAN,EAAhB;AACH,GAFE,EAEA,EAFA,CAFI,CAAP;AAKH,CAnBD;;AAuBAS,MAAM,CAACC,OAAP,GAAiB1B,aAAjB","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file param.js\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\nvar formatters = require('./formatters.js');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset, rawValue) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n    this.rawValue = rawValue; // used for debugging\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n *\n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value);\n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : formatters.toTwosComplement(this.offset).replace('0x','');\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value;\n    }\n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n\n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n"]},"metadata":{},"sourceType":"script"}