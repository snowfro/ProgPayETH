{"ast":null,"code":"var _jsxFileName = \"/Users/erick/eth/progpay/client/src/MyDrizzleApp.js\";\n\n/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\nimport React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      payeeIndex: null,\n      payerIndex: null,\n      contractValueIndex: null\n    };\n  }\n\n  componentDidMount() {\n    //access drizzle props within componentDidMount\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n    this.setState({\n      payeeIndex,\n      payerIndex,\n      contractValueIndex,\n      numberOfPaymentsIndex\n    });\n  }\n\n  render() {\n    const {\n      ProgPayETH\n    } = this.props.drizzleState.contracts;\n    console.log(ProgPayETH);\n    const payee = ProgPayETH.payee[this.state.payeeIndex];\n    const payer = ProgPayETH.payer[this.state.payerIndex];\n    const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n    const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex]; //console.log(payee);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, \"This Contract's Payer is \", payer && payer.value, \" and the Payee is \", payee && payee.value, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, \" The total value of this contract is \", contractValue && contractValue.value, \" to be paid over \", numberOfPayments && numberOfPayments.value, \" payments.\"));\n  }\n\n}\n\nexport default MyDrizzleApp;","map":{"version":3,"sources":["/Users/erick/eth/progpay/client/src/MyDrizzleApp.js"],"names":["React","MyDrizzleApp","Component","state","payeeIndex","payerIndex","contractValueIndex","componentDidMount","drizzle","props","contract","contracts","ProgPayETH","methods","cacheCall","numberOfPaymentsIndex","setState","render","drizzleState","console","log","payee","payer","contractValue","contractValueInWei","numberOfPayments","value"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAE3CC,KAF2C,GAEnC;AAACC,MAAAA,UAAU,EAAC,IAAZ;AAAkBC,MAAAA,UAAU,EAAC,IAA7B;AAAmCC,MAAAA,kBAAkB,EAAC;AAAtD,KAFmC;AAAA;;AAK1CC,EAAAA,iBAAiB,GAAG;AAEjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AAEA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,UAAnC;AAEA,QAAIR,UAAU,GAAGM,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIT,UAAU,GAAGK,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0BC,SAA1B,EAAjB;AACA,QAAIR,kBAAkB,GAAGI,QAAQ,CAACG,OAAT,CAAiB,oBAAjB,EAAuCC,SAAvC,EAAzB;AACA,QAAIC,qBAAqB,GAAGL,QAAQ,CAACG,OAAT,CAAiB,kBAAjB,EAAqCC,SAArC,EAA5B;AAEA,SAAKE,QAAL,CAAc;AAACZ,MAAAA,UAAD;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA,kBAAzB;AAA6CS,MAAAA;AAA7C,KAAd;AAEF;;AAEFE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA;AAAF,QAAiB,KAAKH,KAAL,CAAWS,YAAX,CAAwBP,SAA/C;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AAEA,UAAMS,KAAK,GAAGT,UAAU,CAACS,KAAX,CAAiB,KAAKlB,KAAL,CAAWC,UAA5B,CAAd;AACA,UAAMkB,KAAK,GAAGV,UAAU,CAACU,KAAX,CAAiB,KAAKnB,KAAL,CAAWE,UAA5B,CAAd;AACA,UAAMkB,aAAa,GAAGX,UAAU,CAACY,kBAAX,CAA8B,KAAKrB,KAAL,CAAWG,kBAAzC,CAAtB;AACA,UAAMmB,gBAAgB,GAAGb,UAAU,CAACa,gBAAX,CAA4B,KAAKtB,KAAL,CAAWY,qBAAvC,CAAzB,CAPO,CAQP;;AACE,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA6BO,KAAK,IAAIA,KAAK,CAACI,KAA5C,wBAAqEL,KAAK,IAAIA,KAAK,CAACK,KAApF,MADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAyCH,aAAa,IAAIA,aAAa,CAACG,KAAxE,uBAAgGD,gBAAgB,IAAIA,gBAAgB,CAACC,KAArI,eAFA,CADF;AAOD;;AArCwC;;AAwC3C,eAAezB,YAAf","sourcesContent":["/*import React from \"react\";\n\nclass MyDrizzleApp extends React.Component {\n\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.ProgPayETH;// let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"payee\"].cacheCall();// save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { ProgPayETH } = this.props.drizzleState.contracts;// using the saved `dataKey`, get the variable we're interested in\n    const payee = ProgPayETH.payee[this.state.dataKey];// if it exists, then we display its value\n    return <p>Payee: {payee && payee.value}</p>;\n  }\n}\n\nexport default MyDrizzleApp;\n*/\n\nimport React from \"react\";\nclass MyDrizzleApp extends React.Component {\n\nstate = {payeeIndex:null, payerIndex:null, contractValueIndex:null};\n\n\n componentDidMount() {\n\n    //access drizzle props within componentDidMount\n    const { drizzle} = this.props;\n\n    const contract = drizzle.contracts.ProgPayETH;\n\n    var payeeIndex = contract.methods[\"payee\"].cacheCall();\n    var payerIndex = contract.methods[\"payer\"].cacheCall();\n    var contractValueIndex = contract.methods[\"contractValueInWei\"].cacheCall();\n    var numberOfPaymentsIndex = contract.methods[\"numberOfPayments\"].cacheCall();\n\n    this.setState({payeeIndex, payerIndex, contractValueIndex, numberOfPaymentsIndex});\n\n }\n\nrender() {\n  const { ProgPayETH } = this.props.drizzleState.contracts;\n  console.log(ProgPayETH);\n\n  const payee = ProgPayETH.payee[this.state.payeeIndex];\n  const payer = ProgPayETH.payer[this.state.payerIndex];\n  const contractValue = ProgPayETH.contractValueInWei[this.state.contractValueIndex];\n  const numberOfPayments = ProgPayETH.numberOfPayments[this.state.numberOfPaymentsIndex];\n  //console.log(payee);\n    return (\n      <div>\n      <p>This Contract's Payer is {payer && payer.value} and the Payee is {payee && payee.value}.</p>\n      <p> The total value of this contract is {contractValue && contractValue.value} to be paid over {numberOfPayments && numberOfPayments.value} payments.</p>\n\n      </div>\n    );\n  }\n}\n\nexport default MyDrizzleApp;\n"]},"metadata":{},"sourceType":"module"}